% The economise_series operator takes a power-series representation of
% a function over some (finite) interval and attempts to generate a lower
% degree polynomial that will give an accurate approximation to it.
% It achieves this by succesively eliminating the highest degree term in
% the series using a Chebyshev polynomial. The Chebyshev polynomial that
% is subtracted will lead to a good approximation to a minimax overall
% approximation.

% This first example starts with a simple explicit polynomial of
% degree 5 and trims it down to one of degree 4 where values should
% match reasonably well on the interval -0.5 to +0.5

economise_series(1 - x + x^2 - x^3 + x^4 - x^5 + x^6,
                 x = (-1/2 .. 1/2), 4);



Error estimate: 0.0625

  2049    - 251   247    - 21   11
{------,--------,-----,-------,----}
  2048    256     256    16     8


% The next two cases generate coefficients suitable for computing sine
% and cosine in the range -pi/4 to +pi/4 such that the result will
% be accurate enough for IEEE-style 128-bit floating point. One illustrates
% use of taylor() to generate the series, while the other uses the tps
% package.

on rounded;

 precision 100;


12

r := economise_series(taylor((sin x - x)/x^3, x, 0, 60),
                      x = (-pi/4 .. pi/4), 20, even_terms)$



Error estimate: 3.05798e-32

precision 40;


100
 r;


{ - 0.1666666666666666666666666666666665161768,

 0.008333333333333333333333333333274291321512,

  - 0.0001984126984126984126984126945838942912847,

 0.000002755731922398589065255635086899284046101,

  - 0.00000002505210838544171877379614179732734589409,

 0.0000000001605904383682161364912050144894920507039,

  - 7.647163731819368264977021429304026233745e-13,

 2.811457254209755067502667449904951976641e-15,

  - 8.220634982437414103626848467536224828302e-18,

 1.957262180333927909214657302519369794006e-20,

  - 3.846357925089937791291706765116450015986e-23}


precision 100;


40

psexplim 60;


6

r := economise_series(ps((cos x - 1)/x^2, x, 0),
                      x = (-pi/4 .. pi/4), 2^(-113), even_terms)$



precision 40;


100
 r;


{ - 0.4999999999999999999999999999999999999998,

 0.04166666666666666666666666666666666656687,

  - 0.001388888888888888888888888888888879828654,

 0.00002480158730158730158730158730126415517564,

  - 0.0000002755731922398589065255731862525470324132,

 0.00000000208767569878680989792094302574029159969,

  - 0.00000000001147074559772972471338473138882069531849,

 4.779477332387385076135725648314160421e-14,

  - 1.561920696858550884996584902591418644478e-16,

 4.110317623152462031116692406880874078702e-19,

  - 8.896791152565126524486633907099757201201e-22,

 1.611714328860644411270619029004532191142e-24,

  - 2.466479292926005187632443253355969820841e-27}

off rounded;



% The calculations do not need to be performed in rounded mode...
% and by default the range concerned will be -1 .. 1

economise_series(1 - x^3/factorial 4 + x^5/factorial 5 - x^7/factorial 7,
                 x, 3);



Error estimate: 0.000499132

     - 29      - 121
{1,-------,0,--------}
    11520      3840


economise_series(taylor((sin x - x)/x^3, x, 0, 15),
                      x = (-pi/4 .. pi/4), 5, even_terms);



Error estimate: 8.51561e-08

        14            12                10                   8
{(143*pi   - 574464*pi   + 1684537344*pi   - 3270248497152*pi

                        6
   + 3288935631421440*pi  - 26072164203019461092966400)/1564329852181167665577\
 98400,

            12              10                 8                     6
 ( - 5005*pi   + 20680704*pi   - 63170150400*pi  + 130809939886080*pi

                          4
   - 148002103413964800*pi  + 203688782836089539788800)/2444265394033074477465\
 6000,

         10             8                 6                    4
 (1001*pi   - 4308480*pi  + 14037811200*pi  - 32702484971520*pi

                         2
   + 49334034471321600*pi  - 37888538473974988800)/190958233908833943552000}


% You could even do a totally general case! But then you need to specify
% the desired degree of the result since there is no basis for guessing
% numerical accuracy.

economise_series(a0 + a1*x + a2*x^2 + a3*x^3 + a4*x^4 + a5*x^5,
                 x = (u .. v), 4);



               5          4             3  2           2  3            4       5
{(512*a0 + a5*u  + 45*a5*u *v + 210*a5*u *v  + 210*a5*u *v  + 45*a5*u*v  + a5*v

  )/512,

                  4           3             2  2             3          4
  256*a1 - 25*a5*u  - 300*a5*u *v - 630*a5*u *v  - 300*a5*u*v  - 25*a5*v
 -------------------------------------------------------------------------,
                                    256

                 3           2               2          3
  32*a2 + 25*a5*u  + 135*a5*u *v + 135*a5*u*v  + 25*a5*v
 ---------------------------------------------------------,
                            32

                 2                      2
  16*a3 - 35*a5*u  - 90*a5*u*v - 35*a5*v
 -----------------------------------------,
                    16

  2*a4 + 5*a5*u + 5*a5*v
 ------------------------}
            2



% Now I will find a rational function that interpolates to approximate
% exp x taking exact values at around 20 points across the range 0 ..
% log 2, which should be a range where the value runs from 1 to 2.

precision 40;


40


multipoint_pade(exp, 0, log 2, 1.0e-35);


With N=2 error = 1.0

With N=3 error = 0.002305

With N=4 error = 0.0000677446

With N=5 error = 0.00000148263

With N=6 error = 0.0000000302696

With N=7 error = 0.000000000503716

With N=8 error = 7.83253e-12

With N=9 error = 1.04038e-13

With N=10 error = 1.30281e-15

With N=11 error = 1.44261e-17

With N=12 error = 1.51378e-19

With N=13 error = 1.42856e-21

With N=14 error = 1.28681e-23

With N=15 error = 1.05805e-25

With N=16 error = 8.34954e-28

With N=17 error = 6.10103e-30

With N=18 error = 4.29831e-32

With N=19 error = 2.81982e-34

With N=20 error = 1.78879e-36

Order 20  Worst error = 1.78879e-36

{1,

 0.5311122314897473155708310762867830105862,

 0.1341316226349063906109736328847654541734,

 0.02128182504443390660396941685062232591263,

 0.002358032571139503168767115205209855180813,

 0.0001914574789167483770191652659939777715208,

 0.00001159299807385004094398240489300323565271,

 0.0000005198803834949567669206632765211790358255,

 0.00000001663613306801678764172216406553785315976,

 0.0000000003458271172782567030998235901617756944301,

 3.582017162443809136008503040992901038925e-12}

{1,

  - 0.468887768510252684429168923713216725946,

 0.1030193911451590750401425565979566828746,

  - 0.01396034851226549288825534455631664722075,

 0.001289980262534239275146002054712132578545,

  - 0.0000845900304173951094742183474426012052332,

 0.000003952200249963015569330902055308740361099,

  - 0.0000001274398716434892380381477816769917304143,

 0.000000002586678879106302729781044400705769306457,

  - 0.00000000002532728173775129712694973323860935596735}


% Now similarly for log(1+x)/x

procedure ll x; if x = 0 then 1 else log(1+x)/x;


ll

multipoint_pade(ll, 1/1.03125-1, 1.03125-1, 1.0e-35);


With N=2 error = 1.0

With N=3 error = 0.00000032152

With N=4 error = 0.00000000232099

With N=5 error = 5.61219e-12

With N=6 error = 4.06179e-14

With N=7 error = 1.29779e-16

With N=8 error = 9.12745e-19

With N=9 error = 3.3661e-21

With N=10 error = 2.29481e-23

With N=11 error = 9.25873e-26

With N=12 error = 6.19303e-28

With N=13 error = 2.64205e-30

With N=14 error = 1.73433e-32

With N=15 error = 7.70581e-35

With N=16 error = 4.98483e-37

Order 16  Worst error = 4.98483e-37

{0.9999999999999999999999999999999999999998,

 3.437216207155903436101695733170722894306,

 4.663741775938559123745484638232934808867,

 3.161556840357795374260024293379732643547,

 1.113208746323216571978234720953173953585,

 0.1899453662722136280862914602108431479333,

 0.01233076826246260699332892946698223843332,

 0.00008730490377856216984092397365123972309925,

  - 0.000001212062478349607940528269995460512158084}

{1,

 3.937216207155903436101695733170722894354,

 6.299016546183177508462999171484962873556,

 5.24865971106408298312429196806530254959,

 2.422170471583174753078138247785636589489,

 0.6054549268237203668126739077354554313287,

 0.07337525134482416566951840578213805569129,

 0.00314393018332813682197523782828494023068}


end;

