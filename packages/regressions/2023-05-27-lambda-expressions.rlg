on echo;



% LAMBDA was not "supposed" to be used in algebraic mode, but recent
% changes try to provide upgrades to make it work there.

algebraic;



% (1) Free-standing lambda expressions at top level...

(lambda (); 12345);


(lambda (); 12345)

(lambda x; x+1);


(lambda (x); {quote(plus),x,1})

(lambda (x, y); x + y + 1);


(lambda (x, y); {quote(plus),x,y,1})


% Lambda expressions applied to arguments at the top-level and
% also hidden within expressions.

(lambda x; x+z) 4;


z + 4

w := (lambda x; x+z) 4;


w := z + 4

y + (lambda x; x+z) 4;


y + z + 4


% Using via a name

lam := lambda x; x+y+3;


lam := (lambda (x); {quote(plus),x,quote(y),3})

lam z;


y + z + 3


% Now some of the same using new syntax

([x] (x+z)) 4;


z + 4

y + ([] (x+z))();


x + y + z


% Next some examples in symbolic mode.

symbolic;


nil


fluid '(v);


nil

v := 17;


17


(lambda x; x+1);


(lambda (x) (plus2 x 1))


(lambda (); 12345) ();


12345

([x] (v*x + 7)) 3;


58

(lambda (x, y); x + y + v) (4, 5);


26


% End of tests
end;

nil
