% test safe!-fp!-plus and friends by comparing the version that Reduce
% provides with a reference implementation here.

% The idea is that safe!-fp!-times(u, v) will multiply u by v and return nil
% either if the result would be an infinity or a NaN or if the result would
% be small enought to be de-normmilised and hence less precise than one
% might naiveley hope. For safe!-fp!-plus there is also a nil result for
% some cases where non-equal values are subtracted such as to lose precision.


off echo;


nil

nil

nil

nil

nil

1.797e+308

nil

nil

(2.16402e-153 4.62102e+152 4.56509e-295 4.3381e-297 10.2583 0.0974821
1.92623e-153 5.19148e+152 4.06346e-295 4.87364e-297 9.13106 0.109516
1.71457e-153 5.83237e+152 3.61694e-295 5.47529e-297 8.1277 0.123036 1.52616e-153
6.55238e+152 1.6257e+308 3.10607e+306 3.2195e-295 6.15121e-297 7.23459 0.138225
1.35846e-153 7.36127e+152 1.44706e+308 3.48952e+306 2.86572e-295 6.91058e-297
6.43962 0.155289 1.20919e-153 8.27002e+152 1.28805e+308 3.9203e+306 2.55082e-295
7.76369e-297 5.732 0.174459 1.07632e-153 9.29095e+152 1.14651e+308 4.40426e+306
2.27053e-295 8.72212e-297 5.10214 0.195996 9.58045e-154 1.04379e+153
1.02053e+308 4.94797e+306 2.02103e-295 9.79886e-297 4.54149 0.220192
8.52771e-154 1.17265e+153 9.08386e+307 5.55879e+306 1.79895e-295 1.10085e-296
4.04245 0.247375 7.59064e-154 1.31741e+153 8.08568e+307 6.24503e+306
1.60127e-295 1.23675e-296 3.59825 0.277913 6.75655e-154 1.48005e+153
7.19719e+307 7.01598e+306 1.42532e-295 1.38943e-296 3.20286 0.312221 6.0141e-154
1.66276e+153 6.40633e+307 7.8821e+306 1.2687e-295 1.56096e-296 2.85091 0.350765
5.35325e-154 1.86803e+153 5.70237e+307 8.85514e+306 1.12929e-295 1.75366e-296
2.53764 0.394067 4.76501e-154 2.09863e+153 5.07577e+307 9.94831e+306 1.0052e-295
1.97014e-296 2.25879 0.442715 4.2414e-154 2.35771e+153 4.51802e+307 1.11764e+307
8.9474e-296 2.21336e-296 2.01059 0.497368 3.77534e-154 2.64877e+153 4.02156e+307
1.25562e+307 7.96422e-296 2.4866e-296 1.78965 0.558768 3.36049e-154 2.97576e+153
3.57965e+307 1.41062e+307 7.08907e-296 2.79357e-296 1.593 0.627748 2.99122e-154
3.34312e+153 3.1863e+307 1.58476e+307 6.31009e-296 3.13844e-296 1.41795 0.705243
2.66253e-154 3.75582e+153 2.83618e+307 1.7804e+307 5.61671e-296 3.52588e-296
1.26214 0.792305 2.36996e-154 4.21948e+153 2.52452e+307 2.00019e+307
4.99952e-296 3.96114e-296 1.12345 0.890115 2.10954e-154 4.74038e+153
2.24712e+307 2.24712e+307 4.45015e-296 4.45015e-296 1.0 1.0)

nil

324

nil

0

badcase

nil

nil

nil

nil

nil

2.97713e+138

1.34078e+154

6.03834e+169

8.98847e+307

2.22507e-308

-2.22507e-308

2.97713e+138

1.34078e+154

6.03834e+169

8.98847e+307

2.22507e-308

-2.22507e-308

portable!-fp!-plus

portable!-fp!-times

portable!-fp!-quot

tab_to

nil

nil

ieeerandom

nil

10000

ieeerandom1

ieeerandom2

ieeerandom3

ieeerandom4

ieeerandom4a

ieee2float
multiplication in range 1 to 2^1024

"Test was passed"
multiplication in range 2^-512 to 2^512

"Test was passed"
multiplication in range 2^-1024 to 2^0

"Test was passed"
multiplication with limited number of bits in inputs

"Test was passed"
division with many oveflows

"Test was passed"
division easy cases

"Test was passed"
division when underflow plausible

"Test was passed"
division with limited bits in inputs

"Test was passed"
addition in easy cases

"Test was passed"
addition in easy cases

"Test was passed"
addition with underflow possible

"Test was passed"
addition few bits in each input

"Test was passed"

nil
