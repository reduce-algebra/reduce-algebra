This is a first step in an attempt to consider building Reduce
for Windows-on ARM. On an ARM Windows machine I enter the Windows
subsustem for Linux and then put the files woa-* from here in
/usr/local/bin.

The concept is then that woa-g++ will compile code into ARM Windows
form. Despite its name it will use llvm/clang rather than gcc.

When first used it fetches a toolchain from a useful repository
on github. I expect that the best version to fetch will change over
time so what I have here should be seen as fetching a snapshot and
as needing review over time.

Follwing that I mess with the command line arguments so that a
command such as
   woa-gcc hello.c -o hello
will in fact put its output in hello.exe. I seems to need to
set executable status, so I do that. And the generated binary will not
run unless it has access for some library files including libc++.dll -
so I copy them into the destination directory. One might put those files
in a directory on the PATH, but it would have to be the Windows PATH
not the WSL-Linux one, and in the Windows world it is not really clear
that there is a standard global directory to use.

So far I have really only compiled baby test programd in C and C++
using this scheme. For more complicated things I am expecting to need
to build and install (somewhere) a range of libraries. And arrange
my build scripts to work towards a native Windows version of Reduce
build using woa-g++ rather than g++.

A C Norman.   June 2025
