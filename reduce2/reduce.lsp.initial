(setq date!* "25-MAR-73")

(de newform (u) (deflist u 'newform))

(de newnam (u) (deflist u 'newnam))

(de deflist (l v)
  (cond
    ((null l) nil)
    (t (cons
        (prog2 (putprop (caar l) (cadar l) v) (caar l))
        (deflist (cdr l) v)))) )

(newnam
  '((digit numberp) (error err) (explode explodec) (flagp get) (getel eval)
     (gts eval) (ncons nconsx) (remove removex) (stringp atom) (!*apply apply)
     (!*eval eval)
     (!*!*dollar '!$)
     (!*!*eof '!$eof!$)
     (!*!*esc '!#)
     (!*!*fmark '!&)
     (!*!*qmark '!')
     (!*!*xmark '!!)))

(newform
  '((equal
      (lambda (u v)
        (cond
          ((and (numberp v) (lessp (abs v) 1000)) (list 'eq u v))
          (t (list 'equal u v)))) )
     (errorset (lambda (u v) (list 'errset (list 'eval u) v)))
     (map (lambda (u v) (list 'map v u)))
     (maplist (lambda (u v) (list 'maplist v u)))
     (mapcar (lambda (u v) (list 'mapcar v u)))
     (pts (lambda (u v) (list 'set u v)))
     (put (lambda (u v w) (list 'putprop u w v)))) )

(de lose (u)
  (prog nil
a   (cond ((null u) (return nil)))
    (put (car u) 'lose t)
    (setq u (cdr u))
    (go a)))

(de putd (name varlis body type) (put name type (list 'lambda varlis body)))

(special !*s!* !*s1!*)

(special !*pi!*)

(de compress (u) (cond ((numberp (car u)) (maknam u)) (t (readlist u))))

(de flag (u v)
  (prog nil
a   (cond ((null u) (return nil)))
    (put (car u) v t)
    (setq u (cdr u))
    (go a)))

(de remflag (u v)
  (prog nil
a   (cond ((null u) (return nil)))
    (remprop (car u) v)
    (setq u (cdr u))
    (go a)))

(de getd (u)
  (prog (x)
    (setq x (getl u '(expr fexpr subr fsubr lsubr macro)))
    (return (cond ((and x (null (get u '!*!*array))) (cadr x)) (t nil)))) )

(de global (u)
  (prog nil
a   (cond ((null u) (return nil)))
    (put (car u) 'special t)
    (set (car u) nil)
    (setq u (cdr u))
    (go a)))

(de fixp (n)
  (or (and (numberp n) (eq n (plus 0 n))) (null (eq (cadr n) 'flonum))))

(de quotient (n) (quotient 1 n))

(de !*array (u)
  (prog nil
a   (cond ((null u) (return nil)))
    (eval (cons 'array (cons (caar u) (cons t (cdar u)))) )
    (setq u (cdr u))
    (go a)))

(de setel (u v) (eval (list 'store u (list 'quote v))))

(lose '(arlist mkarray !*array eval getel1 setel))

(de open (u v)
  (prog nil
    (eval (cons v (cons (mkat u) u)))
    (cond
      ((eq v 'input) (setq ipl!* (cons u ipl!*)))
      (t (setq opl!* (cons u opl!*))))
    (return u)))

(de rds (u)
  (cond
    ((null u) (inc nil nil))
    ((member u ipl!*) (inc (mkat u) nil))
    (t (rederr (cons "RDS GIVEN CLOSED FILE" u)))) )

(de wrs (u)
  (cond
    ((null u) (outc nil nil))
    ((member u opl!*) (outc (mkat u) nil))
    (t (rederr (cons "WRS GIVEN CLOSED FILE" u)))) )

(de close (u)
  (cond
    ((null u) nil)
    ((member u ipl!*)
      (inc (cond ((null (equal u ifl!*)) (inc (mkat u) nil)) (t nil)) t))
    ((member u opl!*)
      (outc (cond ((null (equal u ofl!*)) (outc (mkat u) nil)) (t nil)) t))
    (t (rederr (cons "CLOSE GIVEN CLOSED FILE" u)))) )

(de mkat (u)
  (prog (z)
    (setq u (flatten u))
a   (cond ((null u) (return (compress z))))
    (setq z (nconc (delete '!: (explode (car u))) z))
    (setq u (cdr u))
    (go a)))

(de token nil
  (prog (x)
    (scanset)
    (setq ttype!* (setq x (scan)))
    (scanreset)
    (return
      (cond
        ((equal x 0) (intern scnval))
        ((equal x 1) (list 'string scnval))
        ((equal x 2) scnval)
        ((equal scnval 39) (list 'quote (rread)))
        (t (intern (ascii scnval)))) )))

(de delcp (u) (member u '(!; !$ b)))

(de liter (x)
  (and
    (null (numberp x))
    (greaterp
      (setq x (lsh (maknum (caar (get x 'pname)) 'fixnum) (minus 11)))
      64)
    (greaterp 91 x)))

(de mkvar (u v) u)

(lose '(token))

(newnam '((scan scan!*)))

(de outdef (name varlis body type)
  (prog nil
    (terpri)
    (princ "(DEFPROP ")
    (princ name)
    (princ " ")
    (terpri)
    (sprint (list 'lambda varlis body) 2 0)
    (princ " ")
    (terpri)
    (sprint type 1 1)
    (princ ")")
    (terpri)))

(de dfprint (u)
  (prog nil
    (sprint u 2 0)
    (terpri)
    (terpri)))

(put 'defn 'simpfg '((t (ed t))))

(de inout (u v)
  (prog (dev fl !*s!* !*s1!*)
    (setq dev 'dsk!:)
    (setq echol!* !*echo)
a   (cond ((null u) (go d)) ((null (devp (car u))) (go b)))
    (setq dev (car u))
    (setq u (cdr u))
    (go a)
b   (cond ((eq v 'output) (go c)))
    (setq fl (list dev (mkfil (car u))))
    (cond ((member fl ipl!*) (go b1)))
    (open fl v)
b1  (rds (setq ifl!* fl))
    (cond
      ((and (null (atom (cadr fl))) (member (cdadr fl) '(lsp lap sl))) (go l)))
    (setq !*echo iecho!*)
    (begin1)
b2  (setq u (cdr u))
    (go a)
c   (cond
      ((or (eq (car u) 'l) (eq dev 'lpt!:)) (setq fl '(lpt!:)))
      ((eq (car u) 't) (go e))
      (t (setq fl (list dev (mkfil (car u)))) ))
    (cond ((member fl opl!*) (go c1)))
    (open fl v)
c1  (wrs (setq ofl!* fl))
    (linelength 68)
d   (cond ((eq v 'input) (refg)))
    (return nil)
e   (setq ofl!* nil)
    (wrs nil)
    (return nil)
l   (cond ((eq (cdadr fl) 'lap) (setq ibase 8)))
l1  (cond ((eq (cdadr fl) 'sl) (go sl)))
    (setq !*s!* (errset (read) t))
    (cond ((or (atom !*s!*) (cdr !*s!*)) (go l2)))
    (setq !*s!* (car !*s!*))
l11 (cond (!*defn (go l3)))
    (setq !*s!* (errset (eval !*s!*) t))
    (cond ((or (atom !*s!*) (cdr !*s!*)) (go l2)))
    (print (car !*s!*))
    (terpri)
    (go l1)
l2  (setq ibase 10)
    (endifl fl)
    (cond ((eq !*s!* !*!*eof) (go b2)) (t (rederr "ERROR TERMINATION")))
l3  (dfprint !*s!*)
    (go l1)
sl  (setq !*s!* (errset (read) t))
    (cond ((or (atom !*s!*) (cdr !*s!*)) (go l2)))
    (setq !*s1!* (errset (read) t))
    (cond ((or (atom !*s1!*) (cdr !*s1!*)) (go l2)))
    (cond
      ((eq (car !*s!*) 'define)
        (setq !*s!*
          (list 'define!* (mkquote (mapcar (caar !*s1!*) (function reform)))) ))
      (t (setq !*s!*
          (reform
            (cons
              (car !*s!*)
              (mapcar
                (car !*s1!*)
                (function (lambda (j) (mkquote (reform j)))) ))) )))
    (go l11)))

(de reform (u)
  (cond
    ((atom u)
      (cond
        ((numberp u) u)
        (t ((lambda (x) (cond (x (reform x)) (t u))) (get u 'newnam)))) )
    ((eq (car u) 'quote) u)
    ((eq (car u) 'cond)
      (cons
        'cond
        (mapcar
          (cdr u)
          (function (lambda (j) (list (reform (car j)) (reform (cadr j)))) ))) )
    ((eq (car u) 'prog)
      (prog2 (rplacd (cdr u) (mapcar (cddr u) (function reform))) u))
    ((eq (car u) 'lambda) (prog2 (rplaca (cddr u) (reform (caddr u))) u))
    (t (mkform (car u) (mapcar (cdr u) (function reform)))) ))

(de shut (u)
  (prog (x)
a   (cond
      ((null u) (return nil))
      ((devp (car u)) (go d))
      ((eq (car u) 'l) (setq x '(lpt!:)))
      (t (setq x (list 'dsk!: (mkfil (car u)))) ))
a1  (cond
      ((member x opl!*) (go b))
      ((null (member x ipl!*)) (rederr (list x "NOT OPEN"))))
    (endifl x)
    (go c)
b   (close x)
    (setq opl!* (delete x opl!*))
    (cond ((null (equal x ofl!*)) (go c)))
    (setq ofl!* nil)
    (wrs nil)
c   (setq u (cdr u))
    (go a)
d   (cond ((or (null (cdr u)) (cddr u)) (go err)))
    (setq x (list (car u) (cadr u)))
    (setq u (cdr u))
    (go a1)
err (rederr (list "CLOSE FORMAT" u))))

(de devp (u)
  (cond
    ((atom u) (eq (car (reverse (explode u))) '!:))
    (t (null (eq (car u) 'cons)))) )

(de mkfil (u)
  (cond
    ((atom u) u)
    ((numberp (car u)) u)
    ((eq (car u) 'cons) (cons (cadr u) (caddr u)))
    (t (rederr "FILE FORMAT"))))

(setq opl!* nil)

(lose '(inout shut))

(de pause nil
  (prog nil
    (cond
      ((null ifl!*) (return nil))
      ((or (null erfg!*) (null cloc!*)) (go c))
      ((yesp 'edit!?) (go a))
      ((null flg!*) (go c)))
    (setq flg!* (setq sos!* nil))
    (!*apply 'shut (list ifl!*))
    (return nil)
a   (setq contl!* nil)
    (cond ((null ofl!*) (go b)))
    (lprim (list ofl!* "SHUT"))
    (!*apply 'shut (list ofl!*))
b   (return (edit1 cloc!* nil))
c   (cond ((yesp 'cont!?) (return nil)))
    (refg)
    (setq contl!* (cons ifl!* contl!*))
    (setq ifl!* nil)
    (setq ipl!* (cdr ipl!*))
    (rds nil)
    (cond (erfg!* (return 'no)))) )

(de yesp (u)
  (prog (x y)
    (cond (ifl!* (rds nil)))
    (cond (ofl!* (wrs nil)))
    (cond ((atom u) (princ u)) (t (lpri u)))
    (terpri)
a   (setq x (read))
    (terpri)
    (cond ((or (and (eq x 'y) (setq y t)) (eq x 'n)) (go b)))
    (princ "TYPE Y OR N")
    (go a)
b   (cond (ofl!* (wrs ofl!*)))
    (cond (ifl!* (rds ifl!*)))
    (setq cursym!* '!*semicol!*)
    (return y)))

(de cont nil
  (prog nil
    (cond ((null contl!*) (rederr "NO FILE OPEN")))
    (refg)
    (setq ifl!* (car contl!*))
    (setq contl!* (cdr contl!*))
    (setq ipl!* (cons ifl!* ipl!*))
    (rds ifl!*)
    (begin1)))

(flag '(cont) 'ignore)

(de printty (u)
  (prog nil
    (cond ((and (null !*fort) !*nat) (print u)))
    (cond ((null ofl!*) (return nil)))
    (outc nil nil)
    (print u)
    (outc (mkat ofl!*) t)))

(de redmsg1 (u v) (yesp (list 'declare u v "? (Y/N)")))

(deflist '((pause endstat) (cont endstat)) 'stat)

(setq echol!* nil)

(de stime (u)
  (prog (x)
    (setq x (gts u))
    (pts u (!*eval '(time nil)))
    (terpri)
    (princ (!*dif (gts u) x))
    (princ " ")
    (princ 'ms)
    (terpri)))

(de timstat nil (prog2 (scan!*) '(stime 'time2!*)))

(deflist '((time timstat)) 'stat)

(flag '(stime) 'direct)

(setq switch!*
  '((!$ nil !*semicol!* nil)
     (125 nil !*semicol!* nil)
     (!; nil !*semicol!* nil)
     (!+ nil plus nil ! !+! )
     (!- nil difference nil ! !-! )
     (!* !* times expt)
     (!/ nil quotient nil)
     (!= nil equal nil)
     (!, nil !*comma!* nil)
     (!( nil !*lpar!* nil)
     (!) nil !*rpar!* nil)
     (!: != !*colon!* setq nil ! !:!=! )
     (!. nil cons nil)
     (!< != lessp leq)
     (!> != greaterp geq)))

(newnam '((b   expt) (b   setq)))

(prog (x)
  (setq x switch!*)
a (cond
    ((null x) (return nil))
    ((numberp (caar x)) (rplaca (car x) (intern (ascii (caar x)))) ))
  (setq x (cdr x))
  (go a))

(lose '(abs assoc simpgts))

(de begin nil
  (prog nil
    (setq time1!* (setq time2!* (!*eval '(time nil))))
    (setq !*int t)
    (setq !*echo nil)
    (setq contl!* (setq ifl!* (setq ipl!* (setq ofl!* (setq opl!* nil)))) )
    (cond ((eq date!* nil) (go a)))
    (princ "REDUCE 2 (")
    (princ date!*)
    (princ ") ...")
    (terpri)
    (setq date!* nil)
    (cond ((neq system!* 'tenex) (go a)))
    (princ "FOR HELP, TYPE HELP<ALTMODE>")
    (terpri)
a   (setq !*mode (progn (setq alglist!* (cons nil nil)) imode!*))
    (setq crchar!* '! )
    (begin1)
    (princ "ENTERING LISP...")
    (terpri)))

(deflist
  '((initl
      (lambda nil
        (prog (x)
          (getsym subr scaninit letter ignore scan scanset scanreset)
          (scaninit 37 13 34 34 33)
          (mapcar (function ignore) iglist!*)
          (setq klist nil)
          (setq base (setq ibase 10))
          (setq llength!* 67)
          (setq !*nopoint t)
          (ddtin nil)
          (nouuo nil)
          (bakgag nil)
          (setq iecho!* t)
          (setq imode!* 'algebraic)
          (remprop 'df 'fexpr)
          (outc nil t)
          (remprop 'initl 'expr)
          (cond ((getd 'apninit) (apninit)))
          (cond ((getd 'modinit) (modinit)))
          (cond ((getd 'initfn) (initfn 'begin)))
          (excise)))) )
  'expr)

(setq iglist!* '(9 10 12 13 31 32))

(deflist '((retry endstat)) 'stat)

(setq scnval nil)

(putsym (scnval (get 'scnval 'value)))

(put '!*!*null 'newnam (ascii 0))

(lap orderp subr)

(!*!*null 104960 1 2)

(!*!*null 112640 1 (c 0))

(movei 1 't)

(popj p)

(null (setq !*mode 'symbolic))

(setq blockp!* nil)

(setq defl!* '((!*!*array . array)))

(setq erfg!* nil)

(setq initl!* '(blockp!* erfg!* outl!* vars!*))

(setq letl!* nil)

(setq matp!* nil)

(setq outl!* nil)

(setq preclis!*
  '(or and not member equal neq eq geq greaterp leq lessp plus difference times
     quotient expt cons))

(setq ttype!* nil)

(setq type!* nil)

(setq vars!* nil)

(setq !*defn nil)

(setq !*echo nil)

(setq !*msg nil)

(setq !*nat nil)

(de gostat nil
  (prog (var)
    (setq var (cond ((eq (scan) 'to) (scan)) (t cursym!*)))
    (scan)
    (return (list 'go var))))

(put 'go 'stat 'gostat)

(newnam '((goto go)))

(deflist
  '((not not) (plus plus) (difference minus) (minus minus) (times times)
     (quotient recip) (recip recip))
  'unary)

(flag '(and or plus times equal !*comma!*) 'nary)

(flag '(cons setq) 'right)

(deflist '((minus plus) (recip times)) 'alt)

(de mkprec nil
  (prog (x y z)
    (setq x (cons '!*comma!* (cons 'setq preclis!*)))
    (setq y 1)
a   (cond ((null x) (return nil)))
    (put (car x) 'infix y)
    (cond ((setq z (get (car x) 'unary)) (put z 'infix y)))
    (setq x (cdr x))
    (setq y (plus y 1))
    (go a)))

(prog (w x y z)
  (mkprec)
  (setq x switch!*)
a (cond ((null x) (return nil)))
  (setq w (cdar x))
  (put (caar x) 'switch!* w)
  (setq y (list (caar x) (caar x)))
  (put (cadr w) 'prtch y)
  (cond ((setq z (get (cadr w) 'unary)) (put z 'prtch y)))
  (cond ((null (car (setq y (cddr w)))) (go b)))
  (setq z (compress (list (caar x) (car w))))
  (put (car y) 'prtch (list z z))
b (cond
    ((null (cdr y)) (go c))
    ((cadr y) (rplaca (get (cadr w) 'prtch) (cadr y))))
  (cond ((cddr y) (rplaca (get (car y) 'prtch) (caddr y))))
c (setq x (cdr x))
  (go a))

(de terprix nil
  (prog nil
    (cond ((or !*defn (null (or (and !*echo !*nat) erfg!*))) (go a)))
    (mapcar (reverse outl!*) (function princ))
    (terpri)
a   (setq outl!* nil)))

(de delete (u v)
  (cond
    ((null v) nil)
    ((equal u (car v)) (cdr v))
    (t (cons (car v) (delete u (cdr v)))) ))

(de flagp!*!* (u v) (and (atom u) (null (numberp u)) (flagp u v)))

(de begin1 nil
  (prog (result)
    (setq cursym!* '!*semicol!*)
a   (cond
      ((or (and !*echo !*nat) (and !*int (null ifl!*) (null ofl!*))) (terpri)))
    (cond (!*test (stime 'time2!*)))
    (cond
      ((and
         tmode!*
         (setq !*mode (progn (setq alglist!* (cons nil nil)) tmode!*)))
        (setq tmode!* nil)))
    (mapcar initl!* (function sinitl))
    (cond ((eq cursym!* 'end) (go nd0)))
    (setq program!* (errorset '(command) t))
    (cond ((or (atom program!*) (cdr program!*)) (go err1)))
    (setq program!* (car program!*))
    (cond ((eqcar program!* '!*comma!*) (go er)) ((eq cursym!* 'end) (go nd0)))
    (setq program!*
      (cond ((eqcar program!* 'retry) programl!*) (t (mkex program!*))))
    (cond (!*defn (go d)))
b   (terprix)
    (setq result (errorset (gts 'program!*) t))
    (cond ((or (atom result) (cdr result) erfg!*) (go err2)) (!*defn (go a)))
    (setq result (car result))
    (cond
      ((eq semic!* '!;)
        (cond
          ((eq !*mode 'symbolic) (prog2 (print result) (terpri)))
          (result (prog2 (terpri!* t) (varpri result (assgnl program!*) t)))
          (t nil))))
    (cond ((and (neq !*mode 'symbolic) result) (setq !*ans result)))
    (go a)
d   (cond ((or (flagp!*!* key!* 'ignore) (eqcar program!* 'quote)) (go b)))
    (dfprint program!*)
    (cond ((flagp!*!* key!* 'eval) (go b)))
    (go a)
nd0 (comm1 'end)
    (terprix)
nd1 (return (endifl ifl!*))
err1(cond
      ((and (eq program!* !*!*esc) (list (token))) (go a))
      ((null (eq program!* !*!*eof)) (go err3)))
    (go nd1)
er  (lprie
      (cond
        ((null (atom (cadr program!*))) (list (caadr program!*) "UNDEFINED"))
        (t "SYNTAX ERROR")))
    (go err3)
err2(setq programl!* program!*)
err3(comm1 t)
    (cond
      ((or (null erfg!*) (eq erfg!* 'hold)) (lprie "ERROR TERMINATION *****")))
    (setq erfg!* t)
    (cond ((and !*int (eq (!*eval (list 'pause)) 'no)) (return nil)))
    (go a)))

(de endifl (u)
  (prog nil
    (cond (u (go a)))
    (mapcar (append ipl!* opl!*) (function close))
    (setq ipl!* (setq opl!* (setq ofl!* nil)))
    (return nil)
a   (close u)
    (setq ipl!* (delete u ipl!*))
    (cond (ifl!* (rds (setq ifl!* (cond (ipl!* (car ipl!*)) (t nil)))) ))) )

(de assgnl (u)
  (cond
    ((or (atom u) (null (member (car u) '(pts setk setq)))) nil)
    ((atom (cadr u)) (cons (mkquote (cadr u)) (assgnl (caddr u))))
    (t (cons (cadr u) (assgnl (caddr u)))) ))

(de sinitl (u) (pts u (get u 'initl)))

(flag '(in out on off shut) 'ignore)

(de princx (u) (setq outl!* (cons u outl!*)))

(de token nil
  (prog (x y z)
    (setq x crchar!*)
a   (cond
      ((seprp x) (go sepr))
      ((digit x) (go number))
      ((liter x) (go letter))
      ((eq x !*!*xmark) (go escape))
      ((eq x !*!*qmark) (go quote))
      ((eq x !*!*smark) (go string)))
    (setq ttype!* 3)
    (cond ((delcp x) (go d)))
    (setq nxtsym!* x)
a1  (setq crchar!* (readch))
    (go c)
escape
    (setq x (readch))
letter
    (setq ttype!* 0)
let1(setq y (cons x y))
    (cond
      ((or (digit (setq x (readch))) (liter x)) (go let1))
      ((eq x !*!*xmark) (go escape)))
b   (setq nxtsym!* (compress (reverse y)))
    (setq crchar!* x)
c   (return nxtsym!*)
number
    (setq ttype!* 2)
num1(setq y (cons x y))
    (setq z x)
    (cond
      ((or (digit (setq x (readch))) (eq x '!.) (eq x 'e) (eq z 'e)) (go num1))
      (t (go b)))
quote
    (setq crchar!* (readch))
    (setq nxtsym!* (mkquote (rread)))
    (setq ttype!* 4)
    (go c)
string
    (cond ((eq (setq x (readch)) !*!*smark) (go s1)))
    (setq y (cons x y))
    (go string)
s1  (setq nxtsym!* (list 'string (mkstring (reverse y))))
    (setq ttype!* 1)
    (go a1)
sepr(setq x (readch))
    (go a)
d   (setq nxtsym!* x)
    (setq crchar!* '! )
    (go c)))

(de mkquote (u) (list 'quote u))

(de ptoken nil
  (prog (x)
    (setq x (token))
    (princx x)
    (cond ((or (null (eq x '!()) (null (eq x '!)))) (princx " ")))
    (return x)))

(de rread1 nil
  (prog (x y)
    (setq x (ptoken))
    (cond
      ((null (equal ttype!* 3)) (return x))
      ((eq x '!() (return (rrdls)))
      ((null (or (eq x '!+) (eq x '!-))) (return x)))
    (setq y (ptoken))
    (cond
      ((null (numberp y))
        (prog2 (setq nxtsym!* " ") (symerr "SYNTAX ERROR" nil)))
      ((eq x '!-) (setq y (!*apply 'minus (list y)))) )
    (return y)))

(de rrdls nil
  (prog (x y)
    (setq x (rread1))
    (cond
      ((null (equal ttype!* 3)) (go a))
      ((eq x '!)) (return nil))
      ((null (eq x '!.)) (go a)))
    (setq x (rread1))
    (setq y (ptoken))
    (cond
      ((or (null (equal ttype!* 3)) (null (eq y '!))))
        (prog2 (setq nxtsym!* " ") (symerr "DOT CONTEXT ERROR" nil)))
      (t (return x)))
a   (return (cons x (rrdls)))) )

(de rread nil (prog2 (princx " '") (rread1)))

(de scan nil
  (prog (x)
    (cond ((null (eq cursym!* '!*semicol!*)) (go b)))
a   (terprix)
    (setq nxtsym!* (token))
b   (cond ((null (atom nxtsym!*)) (go q1)) ((eq nxtsym!* 'else) (terprix)))
    (princx nxtsym!*)
c   (cond
      ((numberp nxtsym!*) (go l))
      ((and (setq x (get nxtsym!* 'newnam)) (setq nxtsym!* x)) (go c))
      ((eq nxtsym!* 'comment) (go comm))
      ((eq nxtsym!* !*!*esc) (error !*!*esc))
      ((null (equal ttype!* 3)) (go l))
      ((eq nxtsym!* !*!*qmark) (go quote))
      ((null (setq x (get nxtsym!* 'switch!*))) (go l))
      ((eq (cadr x) '!*semicol!*) (go delim)))
    (setq nxtsym!* (token))
    (cond
      ((and (car x) (eq nxtsym!* (car x))) (go sw1))
      (t (setq cursym!* (cadr x))))
    (cond ((eq cursym!* '!*rpar!*) (go l2)) (t (return cursym!*)))
sw1 (princx nxtsym!*)
    (setq cursym!* (caddr x))
    (setq nxtsym!* (token))
    (return cursym!*)
comm(princx crchar!*)
    (cond ((delcp crchar!*) (go com1)))
    (setq crchar!* (readch))
    (go comm)
com1(setq crchar!* '! )
    (terprix)
    (go a)
delim
    (setq semic!* nxtsym!*)
    (return (setq cursym!* '!*semicol!*))
quote
    (setq nxtsym!* (mkquote (rread)))
    (go l)
q1  (cond ((null (eq (car nxtsym!*) 'string)) (go l)))
    (princx " ")
    (princx (cadr (setq nxtsym!* (cons 'quote (cdr nxtsym!*)))) )
l   (setq cursym!* nxtsym!*)
l1  (setq nxtsym!* (token))
l2  (cond
      ((or
         (numberp nxtsym!*)
         (and (atom nxtsym!*) (null (get nxtsym!* 'switch!*))))
        (princx " ")))
    (return cursym!*)))

(flag '(end !*colon!* !*semicol!*) 'delim)

(de eqcar (u v) (and (null (atom u)) (eq (car u) v)))

(de mkex (u) (cond ((eq !*mode 'symbolic) u) (t (aproc u))))

(de mkform (u v)
  (prog (x)
    (return
      (cond
        ((and (atom u) (setq x (get u 'newform))) (!*apply x v))
        (t (cons u v)))) ))

(de remcomma (u) (cond ((eqcar u '!*comma!*) (cdr u)) (t (list u))))

(de xread1 (u)
  (prog (v w x y z z1 z2)
a   (setq z cursym!*)
a1  (cond
      ((or (null (atom z)) (numberp z)) (setq y nil))
      ((flagp z 'delim) (go delimit))
      ((eq z '!*lpar!*) (go lparen))
      ((eq z '!*rpar!*) (go rparen))
      ((setq y (get z 'infix)) (go infx))
      ((setq y (get z 'stat)) (go stat)))
a2  (setq w (cons z w))
next(setq z (scan))
    (go a1)
n1  (setq y nil)
    (setq w (cons z w))
n2  (setq z z1)
    (go a1)
lparen
    (setq y nil)
    (cond ((eq (scan) '!*rpar!*) (go lp1)))
    (setq z (xread1 (cond ((eqcar w 'mat) (setq matp!* 'mat)) (t 'paren))))
    (cond ((eq u 'mat) (setq z (remcomma z))) ((eqcar z '!*comma!*) (go lp2)))
    (go a2)
lp1 (cond (w (setq w (cons (mkform (car w) nil) (cdr w)))) )
    (go next)
lp2 (cond
      ((null w) (go lp3))
      (t (setq w (cons (mkform (car w) (cdr z)) (cdr w)))) )
    (go next)
lp3 (cond ((eq u 'lambda) (go a2)) (t (go err1)))
rparen
    (cond ((null u) (go err2)) (t (go end1)))
infx(cond
      ((or (eq z '!*comma!*) (null (atom (setq z1 (scan)))) (numberp z1))
        (go in1))
      ((or (eq z1 '!*rpar!*) (eq z1 '!*comma!*) (flagp z1 'delim)) (go n1))
      ((and
         (eq z1 '!*lpar!*)
         (eqcar (setq z1 (xread 'paren)) '!*comma!*)
         (setq z (cons z (cdr z1))))
        (go a1)))
in1 (cond (w (go unwind)) ((null (setq z (get z 'unary))) (go err4)))
    (setq v (cons '!*!*un!*!* v))
    (go pr1)
unwind
    (setq z2 (mkvar (car w) z))
un1 (setq w (cdr w))
    (cond
      ((null w) (go un2))
      ((or
         (numberp (car w))
         (and (null (atom (car w))) (null (eq !*mode 'symbolic))))
        (go err5)))
    (setq z2 (mkform (car w) (list z2)))
    (go un1)
un2 (setq v (cons z2 v))
preced
    (cond
      ((null x) (go pr4))
      ((or
         (lessp y (caar x))
         (and
           (equal y (caar x))
           (or
             (and
               (eq z (cdar x))
               (null (flagp z 'nary))
               (null (flagp z 'right)))
             (get (cdar x) 'alt))))
        (go pr2)))
pr1 (setq x (cons (cons y z) x))
    (cond
      ((null (eq z '!*comma!*)) (go n2))
      ((or (cdr x) (null u) (member u '(lambda mat paren))) (go next))
      (t (go end2)))
pr2 (cond
      ((eq (cdar x) 'setq) (go assign))
      ((eq (cadr v) '!*!*un!*!*) (go unary)))
pr21(setq z2
      (mkform
        (cdar x)
        (cond
          ((and (eqcar (car v) (cdar x)) (flagp (cdar x) 'nary))
            (cons (cadr v) (cdar v)))
          (t (list (cadr v) (car v)))) ))
pr3 (setq x (cdr x))
    (setq v (cons z2 (cddr v)))
    (go preced)
unary
    (cond
      ((eq (car v) '!*!*un!*!*) (go pr1))
      (t (setq z2 (mkform (cdar x) (list (car v)))) ))
    (go pr3)
stat(cond
      ((or
         (flagp z 'go)
         (and
           (null (eq u 'proc))
           (or
             (flagp y 'endstat)
             (and (null (delcp nxtsym!*)) (null (eq nxtsym!* '!,)))) ))
        (go s1)))
    (setq y nil)
    (go a2)
s1  (setq w (cons (!*apply y nil) w))
    (setq y nil)
    (go a)
assign
    (setq v (cons (mkex (car v)) (cdr v)))
    (cond
      ((or (numberp (cadr v)) (null (cadr v))) (go err1))
      ((null (atom (cadr v))) (go as3))
      ((eq u 'for) (go as2))
      ((or (eq !*mode 'symbolic) (progvr (cadr v))) (go pr21)))
as1 (setq z2 (mkform 'setk (list (mkarg (cadr v)) (car v))))
    (go pr3)
as2 (setq z2 (list 'setq (cadr v) (car v)))
    (go pr3)
as3 (cond
      ((null (atom (caadr v))) (go err1))
      ((null (eq !*mode 'symbolic)) (go as1))
      ((get (caadr v) '!*!*array)
        (setq z2 (mkform 'setel (list (mkarg (cadr v)) (car v)))) )
      (type!* (go as2))
      (t (setq z2 (procstat1 (cadr v) (car v) 'expr))))
    (go pr3)
delimit
    (cond
      ((and (null u) (flagp z 'nodel)) (go err1))
      ((member u '(mat paren)) (go err3)))
end1(cond (y (go err1)) ((and (null v) (null w) (null x)) (return nil)))
    (setq y 0)
    (go unwind)
pr4 (cond ((null (equal y 0)) (go pr1)))
end2(cond ((null (cdr v)) (return (car v))))
err1(symerr "SYNTAX ERROR" nil)
err2(symerr "TOO MANY RIGHT PARENTHESES" nil)
err3(symerr "TOO FEW RIGHT PARENTHESES" nil)
err4(symerr "REDUNDANT OPERATOR" nil)
err5(symerr "MISSING OPERATOR" nil)))

(flag '(endstat modestat retstat timstat) 'endstat)

(flag '(else while) 'nodel)

(flag '(begin) 'go)

(de xread (u) (prog2 (scan) (xread1 u)))

(de command nil
  (prog nil
    (scan)
    (setq key!* cursym!*)
    (return (xread1 nil))))

(de remnam (u)
  (prog nil
a   (cond ((null u) (return nil)))
    (remprop (car u) 'newnam)
    (remprop (car u) 'newform)
    (setq u (cdr u))
    (go a)))

(de lpri (u)
  (prog nil
a   (cond ((null u) (return nil)))
    (princ (car u))
    (princ " ")
    (setq u (cdr u))
    (go a)))

(de lpriw (u v)
  (prog (x)
    (terprix)
    (setq u (cons u (cond ((and v (or (atom v) (stringp v))) (list v)) (t v))))
    (cond ((and ofl!* (or !*fort (not !*nat))) (go c)))
a   (lpri u)
    (terpri)
    (cond ((null x) (go b)))
    (wrs x)
    (return nil)
b   (cond ((null ofl!*) (return nil)))
c   (setq x ofl!*)
    (wrs nil)
    (go a)))

(de lprim (u) (lpriw "***" u))

(de lprie (u)
  (prog nil
    (setq erfg!* t)
    (terpri)
    (lpriw "*****" u)))

(de rederr (u)
  (prog nil
    (lprie u)
    (terpri)
    (error nil)))

(de symerr (u v)
  (prog (x)
    (setq erfg!* t)
    (cond
      ((or (numberp cursym!*) (not (setq x (get cursym!* 'prtch))))
        (setq x cursym!*))
      (t (setq x (car x))))
    (terpri)
    (setq outl!* (cons (car outl!*) (cons '!$!$!$ (cdr outl!*))))
    (comm1 t)
    (cond
      ((null v) (lprie u))
      (t (lprie
          (cons
            x
            (cons 'invalid (cond (u (list 'in u 'statement)) (t nil)))) )))
    (error nil)))

(de progvr (var)
  (cond
    ((not (atom var)) nil)
    ((or (numberp var) (flagp var 'share)) t)
    (t (prog (x)
        (cond ((setq x (get var 'datatype)) (return (car x)))) ))) )

(de mkarg (u)
  (cond
    ((null u) nil)
    ((atom u) (cond ((progvr u) u) (t (mkquote u))))
    ((and (flagp!*!* (car u) 'nochange) (not (flagp key1!* 'quote))) u)
    ((eq (car u) 'quote) (mkquote u))
    ((eq (car u) 'gts) u)
    (t (cons 'list (mapcar u (function mkarg)))) ))

(de rlis1 (u)
  (prog (x y)
    (cond ((not (setq x (get cursym!* 'statfn))) (setq x cursym!*)))
    (cond ((flagp!*!* (scan) 'delim) (return (list x))))
    (setq y (remcomma (xread1 nil)))
    (cond (u (setq y (list y))))
    (setq key1!* x)
    (setq x
      (cond
        ((not (eq u 'flagop)) (cons x (mapcar y (function mkarg))))
        (t (mkprog
            nil
            (cons (list 'flag (cons 'quote y) (mkquote x)) (get x 'simpfg)))) ))
    (setq key1!* nil)
    (return x)))

(de rlis nil (rlis1 t))

(de norlis nil (rlis1 nil))

(de rlisf nil (rlis1 'flagop))

(de flagop (u)
  (prog nil
a   (cond ((null u) (return nil)))
    (put (car u) 'stat 'rlisf)
    (setq u (cdr u))
    (go a)))

(put 'flagop 'stat 'rlis)

(flag '(cond prog pts quote setq) 'nochange)

(de comm1 (u)
  (prog nil
    (cond ((eq u 'end) (go b)))
a   (cond
      ((or
         (eq cursym!* '!*semicol!*)
         (and (eq u 'end) (member cursym!* '(end else until !*rpar!*))))
        (return nil)))
b   (scan)
    (go a)))

(de aconc (u v) (nconc u (list v)))

(de ifstat nil
  (prog (condx condit)
    (flag letl!* 'delim)
a   (setq condx (xread t))
    (remflag letl!* 'delim)
    (cond ((not (eq cursym!* 'then)) (go c)))
    (setq condit (aconc condit (list (mkex condx) (mkex (xread t)))) )
    (cond
      ((not (eq cursym!* 'else)) (setq condit (aconc condit '('t 'nil))))
      ((eq (scan) 'if) (go a))
      (t (setq condit (aconc condit (list t (mkex (xread1 t)))) )))
b   (return (cons 'cond condit))
c   (cond ((not (member cursym!* letl!*)) (symerr 'if t)))
    (return (iflet condx))))

(put 'if 'stat 'ifstat)

(flag '(then else) 'delim)

(de flagtype (u v)
  (prog (x y z)
    (setq vars!* (append u vars!*))
a   (cond ((null u) (return (reverse z))))
    (setq x (car u))
    (cond ((or (numberp x) (not (atom x))) (symerr "SYNTAX ERROR" nil)))
    (setq y (get x 'datatype))
    (put x 'datatype (cons v y))
    (setq z (cons x z))
    (setq u (cdr u))
    (go a)))

(de decl (u)
  (prog (v w varlis)
a   (cond ((eq cursym!* '!*semicol!*) (go b)))
    (cond ((not (flagp!*!* cursym!* 'type)) (return varlis)))
    (setq w cursym!*)
    (cond ((eq (scan) 'procedure) (return (procstat))))
    (setq v (flagtype (remcomma (xread1 nil)) w))
    (setq varlis (append v varlis))
    (and (not (eq cursym!* '!*semicol!*)) (symerr nil t))
    (cond ((null u) (go c)))
b   (scan)
    (go a)
c   (flag varlis 'share)
    (global varlis)
    (setq u (list (mkform 'flag (list (mkquote varlis) (mkquote 'share)))) )
d   (cond ((null varlis) (return (mkprog nil u))))
    (setq u (cons (mkform 'pts (list (mkquote (car varlis)) nil)) u))
    (setq varlis (cdr varlis))
    (go d)))

(flag '(real integer scalar) 'type)

(de mkprog (u v) (cons 'prog (cons u v)))

(de setdiff (u v) (cond ((null v) u) (t (setdiff (delete (car v) u) (cdr v)))) )

(de remtype (varlis)
  (prog (x y)
    (setq vars!* (setdiff vars!* varlis))
a   (cond ((null varlis) (return nil)))
    (setq x (car varlis))
    (setq y (cdr (get x 'datatype)))
    (cond (y (put x 'datatype y)) (t (remprop x 'datatype)))
    (setq varlis (cdr varlis))
    (go a)))

(de blockstat nil
  (prog (x hold varlis)
    (setq blockp!* (cons nil blockp!*))
    (scan)
    (cond ((member cursym!* '(nil !*rpar!*)) (error !*!*esc)))
    (setq varlis (decl t))
a   (cond ((eq cursym!* 'end) (go b)))
    (setq x (xread1 nil))
    (cond
      ((eqcar x 'end) (go c))
      ((not (eq cursym!* '!*colon!*)) (setq x (mkex x))))
    (and (not (eq cursym!* 'end)) (scan))
    (cond (x (setq hold (aconc hold x))))
    (go a)
b   (comm1 'end)
c   (remtype varlis)
    (setq blockp!* (cdr blockp!*))
    (return (mkprog varlis hold))))

(de decstat nil (decl nil))

(deflist '((integer decstat) (real decstat) (scalar decstat)) 'stat)

(put 'begin 'stat 'blockstat)

(de retstat nil
  (cond
    ((not blockp!*) (symerr nil t))
    (t (list
        'return
        (cond ((flagp!*!* (scan) 'delim) nil) (t (mkex (xread1 t)))) ))) )

(put 'return 'stat 'retstat)

(de modestat nil
  (prog (x)
    (setq x (cond ((eq cursym!* 'lisp) 'symbolic) (t cursym!*)))
    (cond
      ((flagp!*!* (scan) 'delim)
        (return
          (not (setq !*mode (progn (setq alglist!* (cons nil nil)) x)))) ))
    (setq tmode!* !*mode)
    (setq !*mode (progn (setq alglist!* (cons nil nil)) x))
    (return (xread1 nil))))

(de procstat1 (u body type)
  (prog (name varlis)
    (setq name (car u))
    (cond
      ((or (null name) (not (atom name)) (numberp name))
        (rederr (list name "INVALID PROCEDURE NAME")))
      ((flagp name 'lose) (return nil))
      ((not (getd name)) (flag (list name) 'fnc)))
    (cond ((eqcar body 'prog) (setq varlis (cadr body))))
    (cond (varlis (rplaca (cdr body) (setdiff varlis (cdr u)))) )
    (setq varlis (cdr u))
    (cond ((flagp name 'fnc) (go a)))
    (lprim (list name 'redefined))
a   (cond
      (!*defn (outdef name varlis body type))
      (t (putd name varlis body type)))
    (remflag (list name) 'fnc)
    (return
      (cond
        ((eq !*mode 'symbolic) (mkquote name))
        (t (mkform 'flag (list (mkquote (list name)) (mkquote 'opfn)))) ))) )

(de procstat nil
  (prog (x y z)
    (setq type!* (cond ((eq cursym!* 'procedure) 'expr) (t cursym!*)))
    (setq x
      (cond
        ((not (or (eq cursym!* 'procedure) (eq (scan) 'procedure)))
          (prog2 (setq fname!* cursym!*) (xread1 nil)))
        (t (prog2 (setq fname!* (scan)) (xread1 'proc)))) )
    (cond ((atom x) (setq x (list x))) ((eq (car x) 'setq) (go b)))
    (setq y (flagtype (cdr x) 'scalar))
    (setq z (mkex (xread t)))
    (remtype y)
a   (setq z (procstat1 x z type!*))
    (setq type!* nil)
    (return z)
b   (cond
      ((not (eq !*mode 'symbolic))
        (prog2 (setq type!* nil) (symerr "SYNTAX ERROR" nil))))
    (setq z (caddr x))
    (setq x (cadr x))
    (go a)))

(deflist '((procedure procstat) (fexpr procstat) (macro procstat)) 'stat)

(deflist '((algebraic modestat) (lisp modestat) (symbolic modestat)) 'stat)

il

