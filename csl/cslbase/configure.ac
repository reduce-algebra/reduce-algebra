### Process this file with autoconf to produce a configure script.

# A C Norman.                                                     2008-2021

# **************************************************************************
# * Copyright (C) 2021, Codemist.                         A C Norman       *
# *                                                                        *
# * Redistribution and use in source and binary forms, with or without     *
# * modification, are permitted provided that the following conditions are *
# * met:                                                                   *
# *                                                                        *
# *     * Redistributions of source code must retain the relevant          *
# *       copyright notice, this list of conditions and the following      *
# *       disclaimer.                                                      *
# *     * Redistributions in binary form must reproduce the above          *
# *       copyright notice, this list of conditions and the following      *
# *       disclaimer in the documentation and/or other materials provided  *
# *       with the distribution.                                           *
# *                                                                        *
# * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *
# * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *
# * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS      *
# * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE         *
# * COPYRIGHT OWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,   *
# * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,   *
# * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS  *
# * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND *
# * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR  *
# * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF     *
# * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
# * DAMAGE.                                                                *
# **************************************************************************


# $Id$

#
# Special flags that can be used here:
#
#   --enable-debug    Switch on debugging.
#   --enable-profile  build for profiling at the C++ level
#
#   --with-cygwin     Build native cygwin X11 based system, 
#   --with-smallpage  build in way that may be better for small embedded
#                     machines.
#   --enable-conservative   development version not working yet!
#   --enable-embedded well the EMBEDDED option is intended for use via
#                     a heavily cleaned up minimalist build system, but
#                     for testing purposes I allow a build here.
#
#   --host=<triplet>  cross compile for that host.
# 

# Specify the name of this "application" and a version number
AC_INIT([REDUCE],[9.01])

AC_CONFIG_MACRO_DIRS([m4])
AC_CONFIG_AUX_DIR([.])

# automake 1.13 was the first to support AC_CONFIG_MACRO_DIRS
AM_INIT_AUTOMAKE([1.13 -Wno-portability -Wno-override foreign dist-bzip2])
# The automake documentation feels that noisy rules are perhaps safer. This
# is overridden here to make the output from use of "make" a lot more concise
# and people who need to debug the build process can delete this line!
AM_SILENT_RULES([yes])

here=`pwd`
AC_MSG_NOTICE([+++ Configure in directory $here +++])
AC_MSG_NOTICE([Args: "$ac_configure_args"])
 
# Explain that a file "config.h" should be generated
AC_CONFIG_HEADERS([config.h])

AC_COPYRIGHT([Codemist])

AC_PREREQ(2.69)

# My source file is expected to have "csl.cpp" in it. This is just a small
# sanity check in case somebody tries to configure with directories
# messed up.
AC_CONFIG_SRCDIR(csl.cpp)
AC_CONFIG_FILES(Makefile)


case `uname -n` in
*panamintXXX* | *gauguinXXX*)
  default_windows_layout="new"
  ;;
*)
  default_windows_layout="old"
  ;;
esac

AC_ARG_WITH(windows-layout,
  AS_HELP_STRING([--with-windows-layout], [old or new windows layout]),
  [],
  [with_windows_layout="$default_windows_layout"])

AC_MSG_NOTICE([default=$default_windows_layout this-layout=$with_windows_layout])

if test "$with_windows_layout" != "new"
then
  with_windows_layout="old"
fi

# All the source files for CSL are in C++ not C
# and so it is best to make configuration tests match.

AC_LANG(C++)

AC_DEFINE(CSL, [1], [True to tell sources that this build is part of CSL])

AC_ARG_WITH(csl,
  AS_HELP_STRING([--with-csl], [Use the CSL Lisp system]),
  [],
  [with_csl="no"])

AC_ARG_WITH(psl,
  AS_HELP_STRING([--with-psl], [Use the PSL Lisp system. Do not use here!]),
  [],
  [with_psl="no"])

AC_ARG_WITH(both,
  AS_HELP_STRING([--with-csl], [Use both Lisp systems]),
  [with_csl="yes"],
  [with_csl="no"])

# By configuring "--without-redfront" you can avoid having a CSL built
# making an attempt to compile and instate the newfront version of redfront.

AC_ARG_WITH(redfront,
  AS_HELP_STRING([--with-redfront], [Build and install redfront]),
  [],
  [with_redfront="yes"])

AC_ARG_WITH(gui,
  AS_HELP_STRING([--with-gui], [this option is ignored here!]),
  [],
  [])

AC_ARG_WITH(ffi,
  AS_HELP_STRING([--with-ffi],
                 [--without-ffi can be used to avoid use of libffi]),
  [],
  [with_ffi="yes"])

if test "$with_ffi" = "no"
then
  AC_DEFINE(WITHOUT_FFI, [1], [remove the foreign function support])
fi



# What host am I on?
AC_CANONICAL_HOST()

AC_ARG_WITH(build,
   AS_HELP_STRING([--with-build], [specify host-name to use when logging]),
   [],
   [with_build="unknown"])

BUILTFOR="$with_build"

AC_ARG_WITH(pslbuild,
   AS_HELP_STRING([--with-pslbuild], [used if I wish to call the PSL version]),
   [],
   [with_pslbuild="unknown"])

AC_DEFINE_UNQUOTED(PSLBUILD,["$with_pslbuild"], [Show where a matching PSL might live])

AC_ARG_WITH(cygbuild,
   AS_HELP_STRING([--with-cygbuild], [used if I wish to call the cygwin version]),
   [],
   [with_cygbuild=""])

AC_ARG_WITH(cygwin64,
   AS_HELP_STRING([--with-cygwin64], [used if I wish to call the cygwin version]),
   [],
   [with_cygwin64=""])

AC_SUBST(with_cygwin64)

AC_ARG_WITH(cygbuild64,
   AS_HELP_STRING([--with-cygbuild64], [used if I wish to call the 64-bit cygwin version]),
   [],
   [with_cygbuild64=""])

AC_SUBST(with_cygbuild64)

AC_ARG_WITH(crlibm,
   AS_HELP_STRING([--with-crlibm], [Can be used to disable use of crlibm]),
   [],
   [with_crlibm="yes"])

if test "$with_crlibm" != "no"
then
  AC_DEFINE(HAVE_CRLIBM, [1], [Correct Rounding maths library should be used])
fi

AC_ARG_WITH(softfloat,
   AS_HELP_STRING([--with-softfloat], [Can be used to disable use of softfloat]),
   [],
   [with_softfloat="yes"])

if test "$with_softfloat" != "no"
then
  AC_DEFINE(HAVE_SOFTFLOAT, [1], [support for 128-bit long double/float128_t])
fi

# The next option is intended just for debugging. By configureing with
# "--without-karatsuba-threads" the big-multiplication code is left single
# threaded. Slso some code to do with local editing of keyboard input
# (which normally uses a worker thread) is disabled.

AC_ARG_WITH(karatsuba-threads,
   AS_HELP_STRING([--without-karatsuba-threads], [Can be used to avoid multi-threaded multiplication]),
   [],
   [with_karatsuba_threads="yes"])

if test "$with_karatsuba_threads" = "no"
then
  AC_DEFINE(AVOID_KARATSUBA_THREADS, [1], [disable parallel Karatsuba])
  AC_DEFINE(AVOID_TERMINAL_THREADS, [1], [disable input local editing])
fi

if test "$BUILTFOR" = "unknown"
then
  BUILTFOR=`eval "$SHELL $srcdir/../scripts/findhost.sh $host $ac_configure_args"`
  AC_MSG_NOTICE([Build platform detected as $BUILTFOR])
else
  AC_MSG_NOTICE([Build platform specified as $BUILTFOR])

fi

AC_DEFINE_UNQUOTED(BUILTFOR,["$BUILTFOR"], [Architecture this is built to run on])

AC_SUBST(BUILTFOR)
AC_SUBST(PSLBUILD)

AC_SUBST(DLL_CFLAGS)

AC_DEFINE_UNQUOTED(HOST_CPU,"$host_cpu",[Name of CPU])
AC_DEFINE_UNQUOTED(HOST_VENDOR,"$host_vendor",[Name of vendor])
AC_DEFINE_UNQUOTED(HOST_OS,"$host_os",[Name of Operating System])

AC_ARG_WITH(lto,
   AS_HELP_STRING([--with-lto],
                  [Force extreme optimisation with gcc]),
   [],
   [with_lto="no"])

AC_ARG_WITH(fox,
  AS_HELP_STRING([--with-fox],
                 [enable use of FOX]),
  [],
  [with_fox="no"])
AC_MSG_NOTICE([--with-fox=$with_fox])

AC_ARG_WITH(wx,
  AS_HELP_STRING([--with-wx],
                 [enable use of wxWidgets]),
  [],
  [with_wx="no"])
AC_MSG_NOTICE([--with-wx=$with_wx])

AC_ARG_WITH(cygwin,
  AS_HELP_STRING([--with-cygwin],
                 [Force use of raw cywgin]),
  [],
  [with_cygwin="no"])

AC_ARG_WITH(autogen,
  AS_HELP_STRING([--with-autogen],
                 [Used at a higher level]),
  [],
  [with_autogen="yes"])

AC_ARG_WITH(force,
  AS_HELP_STRING([--with-force],
                 [Used at a higher level]),
  [],
  [with_force="no"])

if test "$with_fox" != "no" || test "$with_wx" != "no"
then
  if test "$with_gui" = "no"
  then
    AC_MSG_ERROR([Have asked for Fox or wXWidgets but no GUI at all])
  fi
  with_gui="yes"
else
  with_gui="no"
fi

if test "$with_gui" = "no"
then
  with_fox="no"
  with_wx="no"
fi

if test "$with_gui" != "no"
then
# This symbol is now deprecated in favour of testing the state of
# WITHOUT_GUI which has the opposite sense but whihc I hope captures
# the intent more clearly.
  AC_DEFINE(WINDOW_SYSTEM,[1],[True for a (potentially) Windowed system])
fi

if test "$with_gui" = "no"
then
  AC_DEFINE(WITHOUT_GUI,[1],[Not even an attempt at support for GUI])
fi


AC_SUBST(MAKE)
AC_SUBST(AR)
AC_SUBST(STRIP)
AC_SUBST(SED)
AC_SUBST(WINDRES)
AC_SUBST(REZ)
AC_SUBST(DLLTOOL)
AC_SUBST(OBJDUMP)

# The next two should only be required if you are building for windows
# (cygwin or native style) and are wanting to create a DLL to be loaded
# by my code.

if test "$WINDRES" = ""
then
  AC_CHECK_TOOL(WINDRES, windres, windres)
fi

if test "$DLLTOOL" = ""
then
  AC_CHECK_TOOL(DLLTOOL, dlltool, dlltool)
fi

if test "$OBJDUMP" = ""
then
  AC_CHECK_TOOL(OBJDUMP, objdump, objdump)
fi

AC_MSG_NOTICE([Building with host: $host])

cyg64="no"
case $host in
*-*-cygwin* | *-*-mingw*)
  AC_MSG_NOTICE([Building under cygwin])
  x86="yes"
  exeext="yes"
# Here I will certainly be using gcc and I like to limit the number of
# diagnostics it can generate in any one build.
  CPPFLAGS="$CPPFLAGS -fmax-errors=10"
  CFLAGS="$CFLAGS -mfsgsbase"
  CXXFLAGS="$CXXFLAGS -mfsgsbase"
  if test "$with_cygwin" != "no"
  then
# The next line may ALMOST count as a lie, but under raw cygwin the world
# is closer to Unix than to Windows so this does make some sense!
    AC_DEFINE(UNIX,[1],[True if we are running on Unix, Linux, BSD etc])
# The next line gives further refinement in case there are places where
# I have to take account of the very special case I am in. 
    AC_DEFINE(RAW_CYGWIN, [1], [True if we are running on RAW Cygwin])
    CPPFLAGS="$CPPFLAGS -I/usr/include/ncurses -I/usr/include/freetype2"
# The following line is really ODD and should clearly not be needed, but
# at least until April 2020 without it you have trouble linking code that
# has "extern thread_local" entities when you are an a 64-bit cygwin world.
    LDFLAGS="$LDFLAGS -Wl,--image-base,0x10000000"
    if test "$with_gui" != "no"
    then
      LDFLAGS="$LDFLAGS -L/usr/X11R6/lib"
    fi
    DLL_CFLAGS="$CFLAGS -shared"
    XLIBS="-lXext -lX11"
    cygwin_build="yes"
    cyg64="yes"
  else
# Here is the normal situation where cygwin is the BUILD environment. Mostly
# that means using the mingw-style version of the compiler via
# "x86_64-w64-mingw32-g++".
    AC_MSG_NOTICE([Windows built creating native binary])
    AC_DEFINE(WIN32, [1], [True if we are running on Windows])
    LDFLAGS="$LDFLAGS -static"
    DLL_CFLAGS="$CFLAGS -shared"
# As of May 2018 if I try using std::thread with the mingw32 compilers I
# end up with a binary that relies on some awkward DLLs unless I add in
# the extra curious directive here.
    LIBS="$LIBS -static-libgcc -Wl,-Bstatic -lstdc++ -lpthread"
# In this case I make the machine appear to be "i686-pc-windows" or some
# such to distinguish it from the case where cygwin1.dll might be involved.
    foxdir=`echo $foxdir | sed -e 's/cygwin/windows/'`
    windows_build="yes"
    exeext="yes"
  fi
  X_BASE_LIBS=""
  cyg64="yes"
  ;;
*-*-msdos* | *-*-go32* | *-*-windows*)
    AC_MSG_NOTICE([Windows built creating native binary])
    AC_DEFINE(WIN32, [1], [True if we are running on Windows])
# I seem to need to link with "-static" in a Windows mode or else things
# like the C++ library do not get found when I try to run the executables.
# This is of course liable to be an issue of my $PATH, but linking in static
# mode will still keep me safe.
    CFLAGS="$CFLAGS -mfsgsbase"
    CXXFLAGS="$CXXFLAGS -mfsgsbase"
    LDFLAGS="$LDFLAGS -static"
    DLL_CFLAGS="$CFLAGS -shared"
# In this case I make the machine appear to be "i686-pc-windows" or some
# such to distinguish it from the case where cygwin1.dll might be involved.
    foxdir=`echo $foxdir | sed -e 's/cygwin/windows/'`
    windows_build="yes"
    exeext="yes"
  ;;
*-*solaris*)
  AC_MSG_NOTICE([Building for Solaris])
# I USED to somewhat encourage the use of the Sun compiler "cc" here but now
# I am testing using Solaris 10 x86 and gcc seems available and adequate.
# Note that by setting CC and CXX before using "configure" you can select
# the compiler of your choice. However there is a risk that I need to
# specify explicit paths so if they are not set by the user I will force
# something here! The paths shown here are the ones I find installed on
# Solaris 10 x86 from the Software Companion DVD. This all seems pretty
# HORRID to me!
  if test "$CC" = ""
  then
    AC_PATH_PROGS(CC, gcc, gcc, [/usr/sfw/bin:$PATH])
  fi
  if test "$CXX" = ""
  then
    AC_PATH_PROGS(CXX, g++, g++, [/usr/sfw/bin:$PATH])
  fi 
  if test "$MAKE" = ""
  then
    AC_PATH_PROGS(MAKE, [gmake make], make, [/usr/sfw/bin:$PATH])
  fi
  if test "$AR" = ""
  then
    AC_PATH_PROGS(AR, [gar ar], ar, [/usr/sfw/bin:$PATH])
  fi
  if test "$STRIP" = ""
  then
    AC_PATH_PROGS(STRIP, [gstrip strip], strip, [/usr/sfw/bin:$PATH])
  fi
  if test "$SED" = ""
  then
    AC_PATH_PROGS(SED, [gsed sed], sed, [/usr/sfw/bin:$PATH])
  fi
  if test "$with_gui" != "no"
  then
    LDFLAGS="$LDFLAGS -L/usr/X11R6/lib"
  fi
  XLIBS="-lXext -lX11"
  DLL_CFLAGS="$CFLAGS -shared"
  AC_DEFINE(SOLARIS, [1], [True if we are running on Solaris])
  solaris="yes"
  ;;
*darwin* | *Darwin*)
  AC_MSG_NOTICE([Building for Macintosh/Darwin with X11])
  darwin_build="yes"
  AC_DEFINE(MACINTOSH, [1], [True if we are running on Macintosh])
# Here if the person who invoked configure had arranged to specify
# CC or CXX (to something other than gcc and g++) then it becomes
# THEIR responsibility to arrange all other relevant flags (eg CFLAGS,
# LDFLAGS, LIBS) so as to access a relevant SDK etc etc. ANY problems
# that arise because they hand down options that lead to failures in
# compilation of any sort at all are then THEIR job to resolve by providing
# settings that are satisfactory.
  if test -d $HOME/ports/include
  then
    CPPFLAGS="$CPPFLAGS -I$HOME/ports/include -I$HOME/ports/include/freetype2"
  fi
  if test -d /opt/local/include
  then
    CPPFLAGS="$CPPFLAGS -I/opt/local/include -I/opt/local/include/freetype2"
  fi
  XLIBS="-lXext -lX11 -lXft -lfontconfig -lc"
  macintosh_build="yes"
  darwin_build="yes"
  if test "$CC$CXX" = "" || (test "$CC" = "gcc" && test "$CXX" = "g++")
  then
# The following line was suggested by the libEDIT configuration files.
# Even though I no longer use libEDIT I will keep it!
#
# OK. -fno-common causes C programs to lead to a linker error if you have
#     declarations of variables in several files. It may thus count as
#     and extra safety measure.
    CFLAGS="$CFLAGS -fno-common"
    CXXFLAGS="$CXXFLAGS -fno-common"
# At least maybe MacOS 10.2 may not put X11 headers on the standard include
# path by default, so I help it out here. In later releases it should be
# present already, but an extra chance to scan ought not to hurt anybody.
# Note that 10.2 now counts as seriously archaic. Really use of X11 at all
# on OSX is not very forward-looking!
    CPPFLAGS="$CPPFLAGS -fno-common -I/usr/X11R6/include"
    DLL_CFLAGS="$CFLAGS -bundle -undefined suppress"
    AC_DEFINE(UNIX,[1],[True if we are running on Unix, Linux, BSD etc])
    if test -d $HOME/ports/lib
    then
      LDFLAGS="$LDFLAGS -L$HOME/ports/lib"
    fi
    if test -d /opt/local/lib
    then
      LDFLAGS="$LDFLAGS -L/opt/local/lib"
    fi
    LDFLAGS="$LDFLAGS -L/usr/X11R6/lib -L/opt/X11/lib"
    LDFLAGS="$LDFLAGS -framework Carbon -framework CoreServices -framework ApplicationServices"
  fi
  AC_CHECK_PROGS(REZ,[/usr/bin/Rez /Developer/tools/Rez],[Rez])
  ;;
*-freebsd*)
  AC_MSG_NOTICE([Building on FreeBSD])
  AC_DEFINE(UNIX,[1],[True if we are running on Unix, Linux, BSD etc])
  if test "$target" = ""
  then
    xtarget="$host"
  else
    xtarget="$target"
  fi
  case $xtarget in
  *i386* | *i486* | *i586* | *i686* | *x86* | *amd64*)
     x86="yes"
     ;;
  esac
# To survive 64-bit Linux the next line seems needed. I will leave it for
# BSD since is a /usr/X11R6/lib64 directory does not exist no harm will
# be done.
  if test "$with_gui" != "no"
  then
    if test "$cross_compiling" != "yes"
    then
      AC_CHECK_FILE([/usr/X11R6/lib64],[XLL=lib64],[XLL=lib])
    else
      XLL=lib
    fi
    LDFLAGS="$LDFLAGS -L/usr/X11R6/$XLL"
  fi
  CPPFLAGS="$CPPFLAGS -I/usr/local/include"
  LDFLAGS="$LDFLAGS -pthread"
  DLL_CFLAGS="$CFLAGS -shared"
  XLIBS="-lXext -lX11"
  ;;
*)
  AC_MSG_NOTICE([Assuming a Unix-like environment, including Linux])
  AC_MSG_NOTICE([host=$host, target=$target])
  AC_DEFINE(UNIX,[1],[True if we are running on Unix, Linux, BSD etc])
  linux_build="yes"
  if test "$target" = ""
  then
    xtarget="$host"
  else
    xtarget="$target"
  fi
  case $xtarget in
  *i386* | *i486* | *i586* | *i686* | *x86* | *amd64*)
     x86="yes"
     ;;
  esac
# To survive 64-bit Linux the next line seems needed.
  if test "$with_gui" != "no"
  then
    if test "$cross_compiling" != "yes"
    then
      AC_CHECK_FILE([/usr/X11R6/lib64],[XLL=lib64],[XLL=lib])
    else
      XLL=lib
    fi
    LDFLAGS="$LDFLAGS -L/usr/X11R6/$XLL"
  fi
  DLL_CFLAGS="$CFLAGS -shared"
  XLIBS="-lXext -lX11"
  ;;
esac

# Adjust the number of steps that clang can take while evaluating
# constexpr things at compile time. With the CSL code as of September
# 2022 the code uses almost 3.7 million steps while building cslread.o - I
# can see ways to reduce that at the code of having more very special code
# present. I believe that the clang default is 2^20 (about a million),
# while gcc limits at more like 32 million and that is why I set my
# explicit clang override here to such a huge value - it is in the hope
# that this will leave clang and gcc issues arising at around the same
# point.
AC_CHECK_DECL([__clang__],
  [CXXFLAGS="$CXXFLAGS -fconstexpr-steps=32000000"])

# In some cases there may be explicitly GNU versions of various utilities,
# and I will perhaps use them if I find them.

if test "$MAKE" = ""
then
  AC_CHECK_PROGS(MAKE,[gmake make],[make])
fi
if test "$AR" = ""
then
  AC_CHECK_PROGS(AR,[gar ar],[ar])
fi
if test "$STRIP" = ""
then
  AC_CHECK_PROGS(STRIP,[gstrip strip],[echo])
fi
if test "$SED" = ""
then
  AC_CHECK_PROGS(SED,[gsed sed],[sed])
fi

AC_CHECK_PROGS(VALGRIND,[valgrind],[x])

# I need a C++ compiler that is use to compile small utility programs.
# Im some cases I can not use $CXX because that is a cross-compiler that
# generates binaries that I can not run. I used to just use "g++" and hope,
# but here I will see which of g++, clang++, c++ and CC is at least present.
# I will then assume that that is a viable compiler to use.

case $host in
*-*-cygwin* | *-*-mingw*)
# I use the native windows compilers here so that my scripts can run hosted
# on 64-bit cygwin using the x86_64-w64-mingw toolchain
# should work on any varient of a Windows platform.
  LOCALCXX="x86_64-w64-mingw32-g++ -static"
  LOCALSTRIP="x86_64-w64-mingw32-strip"
  ;;
*)
  AC_PATH_PROGS(LOCALCXX, [g++ clang++ c++ CC], g++, [])
  LOCALCXX="$LOCALCXX -std=gnu++20"
  LOCALSTRIP="$STRIP"
  ;;
esac

AC_SUBST(LOCALCXX)
AC_SUBST(LOCALSTRIP)

# Debugging turned on?
AC_MSG_CHECKING(for debugging)
AC_ARG_ENABLE(debug,
  AS_HELP_STRING([--enable-debug],
                 [compile for debugging]),
  [],
  [enable_debug="no"])
AC_MSG_RESULT([$enable_debug])

AC_ARG_ENABLE(profile,
  AS_HELP_STRING([--enable-profile],
                 [compile for profiling]),
  [],
  [enable_profile="no"])
AC_MSG_RESULT([$enable_profile])

if test "$enable_debug" = "yes"
then
  foxdir="$foxdir-debug"
fi

AC_MSG_NOTICE([foxdir = $foxdir])
# Architecture is only used by the "make save" option, which is a relic
# of older times.
AC_SUBST(ARCHITECTURE)
ARCHITECTURE="$foxdir"

# Want to build "conservative" variant?
AC_ARG_ENABLE(conservative,
  AS_HELP_STRING([--enable-conservative],
                 [garbage collect option that is under development]),
  [],
  [enable_conservative="no"])
AC_MSG_RESULT([$enable_conservative])

if test "$enable_conservative" = "yes"
then
  AC_DEFINE(CONSERVATIVE, [1], [True if GC experiment enabled])
fi

# Want to build "generational" variant?
AC_ARG_ENABLE(conservative,
  AS_HELP_STRING([--enable-generational],
                 [garbage collect option that is under development]),
  [],
  [enable_generational="no"])
AC_MSG_RESULT([$enable_generational])

if test "$enable_conservative" = "yes" && test "$enable_generational" = "yes"
then
  AC_DEFINE(GENERATIONAL, [1], [True if GC experiment enabled])
fi

AC_ARG_ENABLE(test,
  AS_HELP_STRING([--enable-test],
                 [testing-mode version (CSL only)]),
  [],
  [enable_test="no"])

if test "$enable_test" = "yes"
then
  AC_DEFINE([TEST], [1], [For use by developers])
fi

AC_ARG_ENABLE(experiment,
  AS_HELP_STRING([--enable-experiment],
                 [testing-mode version (CSL only)]),
  [],
  [enable_experiment="no"])

if test "$enable_experiment" = "yes"
then
  AC_DEFINE([EXPERIMENT], [1], [For use by developers])
fi

# Want to build with statistic-gathering for the EQUAL function?
AC_MSG_CHECKING(for trace-equal)
AC_ARG_ENABLE(trace-equal,
  AS_HELP_STRING([--enable-trace-equal],
                 [trace use of EQUAL for profiling]),
  [],
  [enable_trace_equal="no"])
AC_MSG_RESULT([$enable_trace_equal])

if test "$enable_trace_equal" = "yes"
then
  AC_DEFINE(TRACED_EQUAL, [1], [True if EQUAL should be profiled])
fi

# Want to build "test" variant?
AC_MSG_CHECKING(for test)
AC_ARG_ENABLE(test,
  AS_HELP_STRING([--enable-test],
                 [testing-mode version]),
  [],
  [enable_test="no"])
AC_MSG_RESULT([$enable_test])

AC_ARG_WITH(arithlib,
  AS_HELP_STRING([--with-arithlib],
                 [arithlib.hpp version]),
  [],
  [with_arithlib="no"])
AC_MSG_RESULT([$with_arithlib])

if test "$with_arithlib" = "yes"
then
  CPPFLAGS="$CPPFLAGS -DARITHLIB=1"
  AC_DEFINE(ARITHLIB, [1], [Work on a transition to use of arithlib.hpp for bignums])
fi

AC_ARG_WITH(throw,
  AS_HELP_STRING([--without-throw],
                 [Avoid C++ catch & throw. Experimental. (CSL only)]),
  [],
  [with_throw="yes"])

if test "$with_throw" = "no"
then
  AC_DEFINE(NO_THROW, [1], [Avoid use of catch and throw])
fi

AC_ARG_WITH(threads,
  AS_HELP_STRING([--with-threads],
                 [Experimental Lisp thread support. (CSL only)]),
  [],
  [with_threads="no"])

# I will only allow "--with-threads" if "--enable-conservative" is set

if test "$with_threads" = "no" || test "$enable_conservative" = "no"
then
  AC_DEFINE(NO_THREADS, [1], [Disable thread support])
fi

# Two things intersect here. The first is that use of thread-local variable
# and code structure that will support a threaded Lisp imposes some overhead
# for everybody even when not actually used. So by default I will build a
# traditional single-threaded system and so avoid that burden. Secondly I am
# developing thread support alongside a new garbage collector, and debugging
# both at the same time is hideous, and so I will want to get a single thread
# version of the new GC stable before I move on to the more challenging
# variant! In addition to thread-local, multi-threaded code may need to use
# some std::atomic<T> variables and those too can have extraordinary costs,
# So --without-threads will avoid some (but not all) of them.

if test "$with_threads" = "no"
then
  AC_DEFINE(NO_THREADS, [1], [Avoid use of thread_local and other thread support])
fi

# Want to build "embedded" variant?
AC_MSG_CHECKING(for embedded)
AC_ARG_ENABLE(embedded,
  AS_HELP_STRING([--enable-embedded],
                 [embedded-mode version]),
  [],
  [enable_embedded="no"])
AC_MSG_RESULT([$enable_embedded])

if test "$enable_embedded" = "yes"
then
  AC_DEFINE(EMBEDDED, [1], [True if this is with no GUI and aimed at embedded use])
fi

if test "$x86" = "yes"
then
  AC_DEFINE(X86, [1], [True if Intel or AMD (64-bit only these days)])
fi

# Checks for programs.

#
# AC_PROG_CC sets CFLAGS to "-g -O2" if it was not already set to
# something else and if gcc was in use. I view that as not what I want!
# so I try to preserve CFLAGS here
#

# find C compiler & preprocessor

old_CFLAGS="$CFLAGS"
old_CXXFLAGS="$CXXFLAGS"
AC_MSG_NOTICE([Looking for C pre-processor])
AC_PROG_CPP
AC_MSG_NOTICE([Looking for C compiler])
AC_PROG_CC
# I will use per-target CPPFLAGS so need this...
AM_PROG_CC_C_O
AC_MSG_NOTICE([Looking for C++ pre-processor])
AC_PROG_CXXCPP
AC_MSG_NOTICE([Looking for C++ compiler])
AC_PROG_CXX
CFLAGS="$old_CFLAGS"
CXXFLAGS="$old_CXXFLAGS"

LT_INIT([disable-static])

AC_ARG_WITH(ccache,
  AS_HELP_STRING([--with-ccache],
                 [--without-ccache can be used to disable use of ccache]),
  [], [])

if test "$with_ccache" != "no"
then
  AC_CHECK_PROG([CCACHE], [ccache], [ccache], [])
  RAWCC="`which $CC 2> /dev/null`"
  RAWCXX="`which $XX 2> /dev/null`"
  if test "with_ccache" != "no" &&
     test "$CC$CXX" = ""
  then
    RAWCC="`which $CC 2> /dev/null`"
    RAWCXX="`which $XX 2> /dev/null`"
    case "$CC$CXX `ls -l $RAWCC 2>/dev/null` `ls -l $RAWCXX 2>/dev/null`" in
    *ccache*)
      ;;
    *)
      d=`pwd`
      printf "#! /bin/sh\nccache $CC \"\$@\"\n" > d/cachecc.sh
      printf "#! /bin/sh\nccache $CXX \"\$@\"\n" > d/cachecxx.sh
      chmod +x $d/cachecc.sh $d/cachecxx.sh
      CC="$d/cachecc.sh"
      CXX="$d/cachecxx.sh"
      ;;
    esac
  fi
fi

if test "$XLIBS" != ""
then
  AC_PATH_X
fi

# If "-std=gnu++20" is available I will add it to CXXFLAGS, at least
# provided "consteval" is recognised.

OLDCXXFLAGS="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS -std=gnu++20"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],
    [[  consteval int f(int x) { return x*x; }
        int main() {return 0;}]])],
  [AC_MSG_NOTICE(Will use -std=gnu++20)],
  [CXXFLAGS="$OLDCXXFLAGS"
   AC_MSG_NOTICE(C++20 not available)])

if test "$enable_debug" = "yes"
then
# In debugging mode I will use -fsanitise=address if it is available.
  OLDCXXFLAGS="$CXXFLAGS"
  CXXFLAGS="$CXXFLAGS -fsanitize=address -fsanitize=undefined"
  OLDLDFLAGS="$LDFLAGS"
  LDFLAGS="static-libasan $LDFLAGS"
  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <cstdio>]],
      [[for (const char *p="String"; *p!=0; p++)
          std::printf("%c\n", *p++);]])],
    [AC_MSG_NOTICE(Will use -fsanitize=address, -fsanitize=undefined)],
    [CXXFLAGS="$OLDCXXFLAGS"
     LDFLAGS="$OLDLDFLAGS"
     AC_MSG_NOTICE(-fsanitize=xx not available)])
fi

# Some newer versions of gcc support a new gnu (rather then sysv) format
# of part of object files. The effect of this new format it to speed up
# dynamic linking, perhaps by a factor of 2. That is good! But an object
# made using only the new scheme fails with a floating point exception
# when you try to run it on an older system. That is it fails while being
# loaded, not while being run. Fedora Core 6 (at least) by default
# uses just the new format, and so generates VERY non-portable executables.
# Enabling the "both" option here should soften the impact...
# Perhaps this is now an issue of ancient history?

AC_MSG_NOTICE([Checking for "--hash-style=both"])
if test "$GCC" = "yes"
then
  OLDLDFLAGS="$LDFLAGS"
  LDFLAGS="$LDFLAGS -Wl,--hash-style=both"
  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <cstdio>]],
                                  [[std::printf("\n");]])],
    [AC_MSG_NOTICE(Will use --hash-style=both)],
    [LDFLAGS="$OLDLDFLAGS"
     AC_MSG_NOTICE(--hash-style=both not available)])
fi

# The behaviour of signed shifts on negative left operands is implementation
# defined. In most cases the shift will be arithmetic, but one could
# imagine it being logical or even something worse. I am going to assume that
# if the test I do here succeeds for type "int" that the same sort of thing
# will be done for all integer types. Even that is not utterly guaranteed!
# If I am cross-compiling and can not run the test program I take a
# pessimistic stance and assume that shifts might not be tidy.

# Note that left shifts on negative signed values are considered undefined,
# and shifts on initially positive signed values that go as far as
# populating the sign bit are only sanctioned from C++-14 onwards.

AC_RUN_IFELSE([AC_LANG_PROGRAM([[]],
  [[int x=-256; int y=x>>4; return (y==-16) ? 0 : 1;]])],
  [arithmetic_shifts="yes"],   # True
  [arithmetic_shifts="no"],    # False
  [arithmetic_shifts="no"])    # Cross-compiling
AC_MSG_NOTICE([Signed shifts status [yes for arithmetic] : $arithmetic_shifts])
if test "$arithmetic_shifts" = "yes"
then
  AC_DEFINE(SIGNED_SHIFTS_ARE_ARITHMETIC, [1], [Not guaranteed by ANSI spec])
fi


AX_CXX_COMPILE_STDCXX([20], [ext], [optional])
AC_MSG_NOTICE([HAVE_CXX20=$HAVE_CXX20])
if test "$HAVE_CXX20" != "1"
then
  AX_CXX_COMPILE_STDCXX([17], [ext], [optional])
  AC_MSG_NOTICE([HAVE_CXX17=$HAVE_CXX17])
  if test "$HAVE_CXX17" != "1"
  then
    AX_CXX_COMPILE_STDCXX([14], [ext], [optional])
    AC_MSG_NOTICE([HAVE_CXX14=$HAVE_CXX14])
    if test "$HAVE_CXX14" != "1"
    then
      AX_CXX_COMPILE_STDCXX([11], [ext], [mandatory])
      AC_MSG_NOTICE([HAVE_CXX11=$HAVE_CXX11])
    fi
  fi
fi

AC_LINK_IFELSE(
  [AC_LANG_SOURCE([
    #if defined __has_include
    #if __has_include(<filesystem>)
    #include <filesystem>
    #ifdef __cpp_lib_filesystem
      int main()
      {   std::filesystem::path p(".");
          return 0;
      }
    #else // __cpp_lib_filesystem
      int main()
      {   return 0;
      }
    #endif // __cpp_lib_filesystem
    #endif // <filesystem>
    #endif // __has_include
  ])],
  [filesystem="ok"],
  [filesystem="fail"])

if test "$filesystem" = "fail"
then
  OLIBS="$LIBS"
  LIBS="$LIBS -lstdc++fs"
  AC_LINK_IFELSE(
    [AC_LANG_SOURCE([
      #if defined __has_include
      #if __has_include(<filesystem>)
      #include <filesystem>
      #ifdef __cpp_lib_filesystem
        int main()
        {   std::filesystem::path p(".");
            return 0;
        }
      #else // __cpp_lib_filesystem
        int main()
        {   return 0;
        }
      #endif // __cpp_lib_filesystem
      #endif // <filesystem>
      #endif // __has_include
    ])],
    [filesystem="ok"],
    [filesystem="fail"
     LIBS="$OLIBS"])
fi

if test "$filesystem" = "fail"
then
  OLIBS="$LIBS"
  LIBS="$LIBS -lc++fs"
  AC_LINK_IFELSE(
    [AC_LANG_SOURCE([
      #if defined __has_include
      #if __has_include(<filesystem>)
      #include <filesystem>
      #ifdef __cpp_lib_filesystem
        int main()
        {   std::filesystem::path p(".");
            return 0;
        }
      #else // __cpp_lib_filesystem
        int main()
        {   return 0;
        }
      #endif // __cpp_lib_filesystem
      #endif // <filesystem>
      #endif // __has_include
    ])],
    [filesystem="ok"],
    [filesystem="fail"
     LIBS="$OLIBS"])
fi

if test "$filesystem" = "fail"
then
  AC_DEFINE(FILESYSTEM_NOT_USABLE, [1], "std::filesystem not available")
fi

AC_COMPILE_IFELSE(
  [AC_LANG_SOURCE([
    #include <bit>
    #include <cstdint>
    int main()
    {   auto a = std::bit_cast<std::uint64_t>(1.0);
        return 0;
    }
  ])],
  [AC_DEFINE(HAVE_BITCAST, [1], [bit_cast<T>() available])],
  [])

if test "$linux_build" = "yes"
then
# This is done on ALL Linux (etc) hosts, and that is potentially dodgy.
# So let me explain what it is about. If one builds on Ubuntu without this
# then libtinfo (used by ncurses) is linked dynamically. If you take the
# resulting binary to a Fedora machine it works OK but you get an annoying
# warning about whether the library has a proper version number. This hack
# will link in libtinfo statically and ought to avoid that ugly warning at
# a rather modest increase in the size of the shipped binary.
  if test -f /usr/lib/*/libtinfo.a
  then
    LIBS="-l:libtinfo.a $LIBS"
  else
    AC_SEARCH_LIBS([tgetent], [ncurses curses tinfo])
  fi
fi

OLIBS="$LIBS"
LIBS="$OLIBS -lncurses"
AC_LINK_IFELSE(
  [AC_LANG_SOURCE([#include <ncurses.h>
     #include <term.h>
     int main()
     {  (void)tgetent(NULL, "xterm");
        return 0;
     } ])],
  [AC_MSG_NOTICE([tgetent found in ncurses])],
  [AC_MSG_NOTICE([tgetent NOT found in ncurses])
   LIBS="$OLIBS -lcurses"
   AC_LINK_IFELSE(
     [AC_LANG_SOURCE([#include <curses.h>
        #include <term.h>
        int main()
        {  (void)tgetent(NULL, "xterm");
           return 0;
        } ])],
     [AC_MSG_NOTICE([tgetent found in curses])],
     [AC_MSG_NOTICE([tgetent NOT found in curses])
      LIBS="$OLIBS"
      LDFLAGS="$LDFLAGS -L/usr/local/lib"
      AC_SEARCH_LIBS([tgetent], [ncurses curses])
     ])
  ])

# I have alternative ways of doing things on Windows and Macintosh, but
# for systems that use gcc (and I am perhaps most thinking of Linux here)
# I want the flag "-rdynamic" enabled (if possible) so that dynamic modules
# (xxx.so) can be loaded with dlopen/dlsym and can access symbols set
# in the main executable.

# Note that this just checks if the flag "-rdynamic" causes compilation to
# FAIL. In some cases it can lead to a compiler warning but then be
# ignored.

if test "$windows_build" != "yes"
then
  if test "$macintosh_build" != "yes"
  then
# If I am using gcc then I would like to use the flag "-rdynamic" when I
# link. I must test and avoid using if if it will cause failure
    AC_MSG_NOTICE([Checking for "-rdynamic"])
    if test "$GCC" = "yes"
    then
      OLDLDFLAGS="$LDFLAGS"
      LDFLAGS="$LDFLAGS -rdynamic"
      AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <cstdio>]],
                                      [[std::printf("\n");]])],
        [rdynamic_available="yes"],
# This test behaves as if it succeeded if gcc did not actually refuse to
# work if given a flag "-rdynamic", but it seems that it also lets through
# cases where gcc issues a warning that -rdynamic was not recognised as
# an option. I guess that is fairly harmless, although it may cause
# people who see it to worry.
        [LDFLAGS="$OLDLDFLAGS"
        rdynamic_available="no"])
    else
      rdynamic_available="no"
    fi
  else
    rdynamic_available="no"
  fi
  AC_MSG_NOTICE([rdynamic=$rdynamic_available])
fi

# With g++ I can ask the compiler to avoid trying to colour diagnostics.
# I find this very helpful when I collect a log of a compilation, because
# the colouring leads to many embedded control characters ending up left in
# the log file. Some people may have alternative work flows and so will
# want to comment out this adjustment.
OLDCPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -fno-diagnostic-color"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <cstdio>]],
                                [[std::printf("\n");]])],
  [],
  [CPPFLAGS="$OLDCPPFLAGS"])
AC_MSG_NOTICE([CPPFLAGS now = $CPPFLAGS])


if test "$darwin_build" = "yes"
then
# I COULD be trying to build on raw Darwin without MacOS present, and in that
# case Carbon etc will not be available.
  AC_MSG_NOTICE([Checking for "-framework"])
  if test "$GCC" = "yes"
  then
    OLDLDFLAGS="$LDFLAGS"
    LDFLAGS="$LDFLAGS -framework Carbon -framework CoreServices -framework ApplicationServices"
    AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <cstdio>]],
                                    [[std::printf("\n");]])],
      [framework_available="yes"],
      [LDFLAGS="$OLDLDFLAGS"
      framework_available="no"])
  else
    framework_available="no"
  fi
  AC_MSG_NOTICE([framework=$framework_available])
  if test "$framework_available" = "yes"
  then
    AC_DEFINE(MAC_FRAMEWORK,[1],[Apple MacOS frameworks available])
  fi
fi

# I might like to be able to force generation of position-independent
# code, and GCC has a directive -fPIC. This checks if it is accepted.
# Specifically when I am generating a loadable module this can be needed.
# However for Windows the option does not cause GCC to fail but it does
# load to a warning that it has no effect, so I will avoid even trying to
# activate it then (for x86 all case is position independent anyway).

if test "$windows_build" != "yes"
then
  AC_MSG_NOTICE([Checking for "-fPIC"])
  if test "$GCC" = "yes"
  then
    OLDCFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS -fPIC"
    AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <cstdio>]],
                                     [[std::printf("\n");]])],
       [fpic_available="yes"],
       [fpic_available="no"])
    CFLAGS="$OLDCFLAGS"
  else
    fpic_available="no"
  fi
  AC_MSG_NOTICE([-fPIC=$fpic_available])

  if test "$fpic_available" = "yes"
  then
    DLL_CFLAGS="$DLL_CFLAGS -fPIC"
  fi
fi

if test "$solaris" = "yes"
then
# I believe that the Sun C compilers need a "-mt" flag so here I check if
# such a flag is accepted and if so I will use it.
  OLDCFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS -mt"
  AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <cstdio>]],
                                  [[std::printf("\n");]])],
                 [CXXFLAGS="$CXXFLAGS -mt"],
                 [CFLAGS="$OLDCFLAGS"])
fi

if test "$with_lto" != "no"
then
  AC_MSG_NOTICE([Checking for link time optimisation capability (LTO)])
  if test "$GCC" = "yes"
  then
    OLDCFLAGS="$CFLAGS"
    OLDLDFLAGS="$LDFLAGS"
    CFLAGS="$CFLAGS -flto"
    LDFLAGS="$LDFLAGS -flto"
    AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <cstdio>]],
                                    [[std::printf("\n");]])],
      [CXXFLAGS="$CXXFLAGS -flto"
       HIGHOPT="-O3"
       AC_MSG_NOTICE(Will use link-time optimisation and -O3)],
      [CFLAGS="$OLDCFLAGS"
       LDFLAGS="$OLDLDFLAGS"
       AC_MSG_NOTICE(-flto not available)])
  fi
fi

if test "$with_gui" != "no"
then
  if (test "$windows_build" != "yes" || test "$with_cygwin" != "no")
  then
# I will not even look for Xft if I am building for win32 rather than X.
#
# Furthermore I will not try xft-config if I am cross-compiling. This may
# be a mess if I ever try to cross compile towards a machine that needs it.
    AC_ARG_WITH(xft,
      AS_HELP_STRING([--with-xft],
                     [Can be used to disable use of XFT. Default is yes]),
      [],
      [with_xft="yes"])
    if test "$with_xft" != "no" && test "$cross_compiling" != "yes"
    then
      AC_PATH_PROGS(XFT_CONFIG, xft-config, [no],
        [/usr/local/bin:/usr/X11R6/bin:/usr/sfw/bin:/usr/csw/bin:$PATH])
      if test "$XFT_CONFIG" != "no"
      then
# I will add to CFLAGS and XLIBS if xft-config is found
        xft_cflags=`$XFT_CONFIG --cflags`
        CFLAGS="$CFLAGS $xft_cflags"
        CXXFLAGS="$CXXFLAGS $xft_cflags"
        CPPFLAGS="$CPPFLAGS $xft_cflags"
        xft_libs=`$XFT_CONFIG --libs`
        XLIBS="$XLIBS $xft_libs"
# NB that xft-config hands back some stuff that I might believe should
# perhaps be in LDFLAGS not LIBS, but never mind! Also done this way we
# may get some libraries mentioned more than once in LIBS - I hope that
# will not cause pain.
        AC_DEFINE(HAVE_LIBXFT, [1], [True Xft is available])
        xft_found="yes"
        AC_MSG_NOTICE([xft-config found, so Xft should be available])
      else
# here xft-config is NOT present, but it may be that xft headers and
# libraries are nevertheless available. I will look for freetype-config
# which may also help me...
        AC_PATH_PROGS(FREETYPE_CONFIG, freetype-config, [no],
          [/usr/local/bin:/usr/sfw/bin:$HOME/ports/bin:/opt/local/bin:$PATH])
        if test "$FREETYPE_CONFIG" != "no"
        then
# I will add to CFLAGS and XLIBS if freetype-config is found, an in fact I
# will then leave them there even if then Xft is not found. That is perhaps
# slightly untidy.
          freetype_cflags=`$FREETYPE_CONFIG --cflags`
          CFLAGS="$CFLAGS $freetype_cflags"
          CXXFLAGS="$CXXFLAGS $freetype_cflags"
          CPPFLAGS="$CPPFLAGS $freetype_cflags"
          freetype_libs=`$FREETYPE_CONFIG --libs`
          XLIBS="$XLIBS $freetype_libs"
          xft_found="yes"
          AC_SEARCH_LIBS([FcConfigCreate], [fontconfig])
          AC_SEARCH_LIBS([XftFontOpen], [Xft],,[xft_found="no"])
          AC_CHECK_HEADER(X11/Xft/Xft.h,,[xft_found="no"])
          if test "$xft_found" = "yes"
          then
            AC_DEFINE(HAVE_LIBXFT, [1], [True Xft is available])
            AC_MSG_NOTICE([freetype-config found, and Xft should be available])
          fi
        else
# Now a search without the benefit of helper tools.
          xft_found="yes"
          AC_SEARCH_LIBS([FcConfigCreate], [fontconfig])
          AC_SEARCH_LIBS([XftFontOpen], [Xft],,[xft_found="no"])
          AC_CHECK_HEADER(X11/Xft/Xft.h,,[xft_found="no"])
          if test "$xft_found" = "yes"
          then
            CPPFLAGS="$CPPFLAGS -I/usr/include/freetype2"
            AC_DEFINE(HAVE_LIBXFT, [1], [True Xft is available])
          fi
        fi
      fi
    fi
  fi

  if test "$xft_found" != "yes"
  then
# Now a search without the benefit of helper tools.
    xft_found="yes"
    AC_SEARCH_LIBS([FcConfigCreate], [fontconfig])
    AC_SEARCH_LIBS([XftFontOpen], [Xft],,[xft_found="no"])
    AC_CHECK_HEADER(X11/Xft/Xft.h,,[xft_found="no"])
    if test "$xft_found" = "yes"
    then
      AC_DEFINE(HAVE_LIBXFT, [1], [True Xft is available])
    fi
  fi
fi

# find command to do best approx to "ln -s" and set LN_S		
AC_PROG_LN_S

# Static linking wanted?
# NOTE that at present I only do anything about this if compiling with "gcc"
# since then I expect that just including "-static" in LDFLAGS will do the
# trick for me.
AC_MSG_CHECKING(for static linking)
AC_ARG_ENABLE(static,
  AS_HELP_STRING([--enable-static],
                 [link it all statically]),
  [],
  [enable_static="no"])
AC_MSG_RESULT([$enable_static])

# In lots of cases I will be using gcc. In that case I will use -O3 for
# release code, but -O0 when debugging. I also stick in -Wall so I get
# loads of comments about code style etc. For other C compilers I do
# not set any optimisation flags but I do expect "-g" to be available
# to enable debugging.

#
# Well as of late 2003/early 2004 some versions of gcc appears to compile
# some of my code at -O3 in ways that hurt me, but at -O2 mostly things seem
# better behaved. At one stage I believed that my trouble might have been
# to do with "Strict Aliasing" but I am less convinced of that now - however
# to be cautious I switch off that aspect of gcc. I really want this code
# to compile and run first-time on as many systems as I can and so tuning
# down the optimisation level from -O3 to -O2 is probably worthwhile even
# though it hits performance a little. Furthermore in 2008 I found that
# some things behaved in ways I did not understand with "-O1 -g" hence I
# drop back to "-O0 -g".
# Now in 2016 I am moving back to -O3 for production use, but will remain
# with a very conservative -O0 for debugging builds. Please note that these
# settings are applied if the compiler is detected as gcc.

LOWOPT="-O0"
if test "$HIGHOPT" = ""
then
  HIGHOPT="-O3"
fi

case $CC in
x86_64-w64-*)
  AC_DEFINE(WIN64, [1], [True if we are running on Windows (64 bit)])
  ;;
esac

AC_ARG_WITH(smallpage,
   AS_HELP_STRING([--with-smallpage],
                  [Use smaller block of memory to suit tiny computers]),
   [],
   [with_smallpage="no"])

if test "$with_smallpage" != "no"
then
# Using 19 bits here causes allocation in pages each of which is 512Kbytes,
# rather than the default 4M pages. A key limitation this introduces is that
# any Lisp vector may then be at most 128K items long. I hope that not many
# people will worry about that.
  CFLAGS="$CFLAGS -DPAGE_BITS=19"
fi

if test "$GCC" = "yes"
then
# At one stage I was concerned about "strict aliasing" so disabled the
# exploitation of it. It still seems delicate in places, but experience is
# now that enough works that I will allow g++ to optimise enthusiastically!
  NSA=
# NSA="-fno-strict-aliasing"
  if test "$enable_debug" = "yes"
  then
    CFLAGS="${CFLAGS} ${NSA} ${LOWOPT} -g -DDEBUG=1 -Wall"
    CXXFLAGS="${CXXFLAGS} ${NSA} ${LOWOPT} -g -DDEBUG=1 -Wall"
    DLL_CFLAGS="${DLL_CFLAGS} ${NSA} ${LOWOPT} -g -DDEBUG=1 -Wall"
    LDFLAGS="${LDFLAGS} -g"
  else
    CFLAGS="$CFLAGS ${NSA} ${HIGHOPT} -Wall"
    CXXFLAGS="$CXXFLAGS ${NSA} ${HIGHOPT} -Wall"
    DLL_CFLAGS="${DLL_CFLAGS} ${NSA} ${HIGHOPT}"
  fi
  if test "$enable_profile" = "yes"
  then
    CXXFLAGS="$CXXFLAGS -pg"
    LDFLAGS="$LDFLAGS -pg"
    STRIP="echo"
  fi
  if test "$enable_static" = "yes"
  then
    LDFLAGS="${LDFLAGS} -static"
    AC_MSG_NOTICE([including -static in linker flags])
  fi
else
  if test "$enable_debug" = "yes"
  then
    CFLAGS="${CFLAGS} -g -DDEBUG=1"
    CXXFLAGS="${CXXFLAGS} -g -DDEBUG=1"
    DLL_CFLAGS="${DLL_CFLAGS} -g -DDEBUG=1"
    LDFLAGS="${LDFLAGS} -g"
  fi
fi

# On at least some systems static linking against X11 needs -ldl
# Also I will use dlopen (and friends) for dynamic loading of stuff
# compiled via C.
AC_SEARCH_LIBS([dlopen], [dl])
AC_SEARCH_LIBS([dlsym], [dl])

# Fox 1.6 seems to use nanosleep in FXThread and on some systems at least
# the means I must link against librt.
AC_SEARCH_LIBS([clock_nanosleep], [rt])

AC_SEARCH_LIBS([pthread_create], [pthread])
AC_SEARCH_LIBS([pthread_mutex_init], [pthread])
AC_SEARCH_LIBS([pthread_mutexattr_settype], [pthread])

if test "$with_gui" != "no"
then
  LIBS="$XLIBS $LIBS"
fi

# I want to support some flavour of direct screen addressing. 
# On Windows I use the Console API. 
# Otherwise I need both term.h and [n]curses.h. Sometimes the file
# may be <ncurses/term.h>. If term.h is not available I may survive
# on tgetent.
# For linking I count "tgetent" as an adequate function to test for
# as diagnostic of curses.

# I am giving up on supporting things that only have "termcap" on the
# grounds that that is now supposed to count as ancient.
# At an earlier stage I deeply nested messes of tests here. They became
# confusing! So now I will just check for each header and then work out later
# on if I have enough to support what I need.

if test "$windows_build" != "yes" || test "$with_cygwin" = "yes"
then
  AC_CHECK_HEADERS(termios.h sys/ioctl.h)

  if test -d /usr/local/include/ncurses
  then
    CPPFLAGS="$CPPFLAGS -I/usr/local/include/ncurses"
  fi

  AC_CHECK_HEADERS(curses.h ncurses.h)

  AC_MSG_NOTICE([curses=$HAVE_CURSES_H ncurses=$HAVE_NCURSES_H])

# There is a misery here! "term.h" (on some machines) needs curses.h
# included first (typically to define "bool" for it).
  AC_CHECK_HEADERS(term.h,[],[],
     [#if HAVE_CURSES_H
      #include <curses.h>
      #else
      #if HAVE_NCURSES_H
      #include <ncurses.h>
      #endif
      #endif])
  AC_CHECK_HEADERS(ncurses/term.h,[],[],
     [#if HAVE_CURSES_H
      #include <curses.h>
      #else
      #if HAVE_NCURSES_H
      #include <ncurses.h>
      #endif
      #endif])

# I have come across a platform where the curses libraries must be fetched
# from /usr/local/lib. I am trying to deal with this in a way where special
# treatment will only be applied if (n)curses can not be found in the usual
# way.
  OLIBS="$LIBS"
  LIBS="$OLIBS -lncurses"
  AC_LINK_IFELSE(
    [AC_LANG_SOURCE([#include <ncurses.h>
       #include <term.h>
       int main()
       {  (void)tgetent(NULL, "xterm");
          return 0;
       } ])],
    [AC_MSG_NOTICE([tgetent found in ncurses])],
    [AC_MSG_NOTICE([tgetent NOT found in ncurses])
     LIBS="$OLIBS -lcurses"
     AC_LINK_IFELSE(
       [AC_LANG_SOURCE([#include <curses.h>
          #include <term.h>
          int main()
          {  (void)tgetent(NULL, "xterm");
             return 0;
          } ])],
       [AC_MSG_NOTICE([tgetent found in curses])],
       [AC_MSG_NOTICE([tgetent NOT found in curses])
        LIBS="$OLIBS"
        LDFLAGS="$LDFLAGS -L/usr/local/lib"
        AC_SEARCH_LIBS([tgetent], [ncurses curses])
       ])
    ])

  AC_CHECK_FUNCS([tgetent tputs])

# Now I have access to some terminfo support. I would like to know if
# the convenience function cfmakeraw is present since if so I will use
# it, but if it is not there I will just simulate what I hope it does.
  AC_CHECK_FUNCS(cfmakeraw)

fi


AC_MSG_CHECKING([for __builtin_clz])
AC_LINK_IFELSE([AC_LANG_PROGRAM(,
                return ( __builtin_clz(0x10000u) == 15) ? 1 : 0)],
[have_builtin_clz=yes
 AC_MSG_RESULT([yes])],
[have_builtin_clz=no
 AC_MSG_RESULT([no])])
if test "$have_builtin_clz" = "yes"
then
  AC_DEFINE([HAVE___BUILTIN_CLZ], [1],
            [Define to 1 if the compiler support __builtin_clz.])
fi

AC_MSG_CHECKING([for __builtin_ctz])
AC_LINK_IFELSE([AC_LANG_PROGRAM(,
                return ( __builtin_ctz(0x10000u) == 16) ? 1 : 0)],
[have_builtin_ctz=yes
 AC_MSG_RESULT([yes])],
[have_builtin_ctz=no
 AC_MSG_RESULT([no])])
if test "$have_builtin_ctz" = "yes"
then
  AC_DEFINE([HAVE___BUILTIN_CTZ], [1],
            [Define to 1 if the compiler support __builtin_ctz.])
fi

# These days I want zlib to do the compression I want.
AC_CHECK_HEADERS(zlib.h)
AC_SEARCH_LIBS([deflate], [z])

# Some platforms appear to require the Xcursor library. The next line
# should arrange that it gets scanned if it is available.
# It is obviously irrelevant on Windows and if no GUI is required,
# However Solarix 10 x86 seems to misdetect Xrender when in
# 64-bit mode so I fudge that away here.

if test "$with_gui" != "no" &&
   test "$solaris" != "yes" &&
   (test "$windows_build" != "yes" ||
     test "$with_cygwin" = "yes")
then
  AC_SEARCH_LIBS([XRenderCreateCursor], [Xrender])
  AC_SEARCH_LIBS([XcursorImageCreate], [Xcursor])
  AC_SEARCH_LIBS([XRRQueryVersion], [Xrandr])
fi

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT

AC_CHECK_HEADER([stdint.h],
                [],
                [AC_MSG_ERROR([header file <stdint.h> needed])])

AC_CHECK_HEADER([inttypes.h],
                [],
                [AC_MSG_ERROR([header file <inttypes.h> needed])])

AC_CHECK_HEADERS([complex.h])

AC_CHECK_HEADERS([fcntl.h float.h malloc.h memory.h cstdio])
AC_CHECK_HEADERS([stddef.h stdlib.h string.h sys/resource.h time.h])
AC_CHECK_HEADERS([sys/param.h sys/time.h sys/times.h unistd.h utime.h])
AC_CHECK_HEADERS([arpa/inet.h netdb.h netinet/in.h sys/socket.h sys/stat.h])
AC_CHECK_HEADERS([sys/types.h sys/wait.h sys/shm.h sys/ipc.h signal.h])
AC_CHECK_HEADERS([setjmp.h sys/sysctl.h syscall.h sched.h])

AC_CHECK_TYPE([cpu_set_t], [], [],
   [#ifdef HAVE_SCHED_H
    #include <sched.h>
    #endif])

AC_CHECK_TYPE([struct tms], [], [],
   [#ifdef HAVE_SYS_TIMES_H
    #include <sys/times.h>
    #endif])

AC_CHECK_TYPE([struct timeval], [], [],
   [#ifdef HAVE_SYS_TIME_H
    #include <sys/time.h>
    #endif])

AC_CHECK_TYPE([struct sigaction], [], [],
   [#ifdef HAVE_SIGNAL_H
    #include <signal.h>
    #endif])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STAT
AC_C_CONST
AC_STRUCT_TM
AC_C_VOLATILE

AC_CHECK_TYPE([complex double], [], [],
   [#ifdef HAVE_COMPLEX_H
    #include <complex.h>
    #endif])

# On SOME platforms gcc (and clang) support a type "__int128". In particular
# it is available on 64-bits Intel/AMD platforms, which are one of the
# most common situations and hence one where using the hardware support
# for multiplication and division here can be good.
#
AC_CHECK_TYPES([__int128, unsigned __int128])

# I would view the following as a better names for an 128-bit integer type and
# will map "unsigned __int128" etc onto it when relevant.
AC_CHECK_TYPES([int128_t, uint128_t])

AC_CHECK_SIZEOF(wchar_t)

AC_CHECK_TYPE([socklen_t],[],[],[#include <sys/socket.h>])

AC_SEARCH_LIBS([socket], [socket])
AC_SEARCH_LIBS([gethostbyname], [nsl])

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_ERROR_AT_LINE
AC_FUNC_LSTAT
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
AC_FUNC_MEMCMP
AC_FUNC_STAT
AC_FUNC_UTIME_NULL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([atexit ftruncate getcwd gethostbyaddr gethostbyname inet_ntoa])
AC_CHECK_FUNCS([quick_exit at_quick_exit _Exit])
AC_CHECK_FUNCS([memmove memset mkdir pow rmdir socket sqrt strchr strdup])
AC_CHECK_FUNCS([strrchr strstr utime popen getrlimit])
AC_CHECK_FUNCS([fork wait waitpid shmget shmat shmdt shmctl])
AC_CHECK_FUNCS([vsnprintf sysctlbyname gettimeofday times])
AC_SEARCH_LIBS([siglongjmp], [c])
AC_SEARCH_LIBS([sigaltstack], [c])
AC_SEARCH_LIBS([sigaction], [c])
AC_CHECK_FUNCS([siglongjmp sigaltstack sigaction])
AC_CHECK_FUNCS([clock_gettime signbit])
AC_CHECK_FUNCS([getc_unlocked putc_unlocked])
AC_CHECK_FUNCS([_getc_nolock _putc_nolock])

# I will view csqrt as representative of all the complex elementary functions
# and if it is found I will assume that csin, clog and all the rest are
# available.
AC_CHECK_FUNCS([csqrt])
   
if test "$ac_cv_header_sys_resource_h" = "yes"
then
  AC_CHECK_DECLS([RLIM_SAVED_CUR, RLIM_SAVED_MAX], [], [],
    [[#include <sys/resource.h>]])
fi

AC_SUBST(FOX_INCLUDES)
AC_SUBST(FOX_LIBS)

if test "$with_fox" != "no"
then
  FOX_INCLUDES="-I ../include/fox-1.6"
  FOX_LIBS="-lFOX-1.6"
  AC_DEFINE(HAVE_LIBFOX, [1], [Fox library present])
fi

if test "$with_wx" != "no"
then
  AC_DEFINE(HAVE_LIBWX, [1], [wxWidgets library will be used])
fi

#
# The extra libraries listed here seem to need to be scanned last.
#

if test "$windows_build" = "yes"
then
  case $CC in
  x86_64-w64-*)
    LIBS="$LIBS -ladvapi32 -lshell32 -lcomctl32 -lgdi32 -lws2_32 -lmswsock -lwinspool -lmpr -luser32"
    ;;
  *)
    LIBS="$LIBS -lcomctl32 -lgdi32 -lws2_32 -lwsock32 -lwinspool -lmpr"
    ;;
  esac
fi

if test "$macintosh_build" = "yes"
then
# 10.0  Cheetah       )
# 10.1  Puma          )
# 10.2  Jaguar        ) I will not support these at all any more.
# 10.3  Panther       ) It might be possible to build on them and
# 10.4  Tiger         ) it certainly should be by reverting to an older
# 10.5  Leopard       ) version of CSL.
# 10.6  Snow Leopard  )
# 10.7  Lion          )
# 10.8  Mountain Lion )
# 10.9  Mavericks     )
# 10.10 Yosemite      )
# 10.11 El Capitan    )
# 10.12 Sierra        )
# 10.13 High Sierra     Now the oldest deployment target I support
#                       (this is because it is the best release my very
#                       old macbook can install!).
# 10.14 Mojave
# 10.15 Catalina
# 11.x  Big Sur         Ha ha - from late 2020 there is a transition to
#                       "Apple Silicon", ie ARM64.                     
# 12.x  Monterey        Now the version I build and test on.
#
# Every few years maybe I should review how old a MacOS can be supported, but
# note very well that one needs to configure Macports to use a deployment
# target matching the one here, and if that is changed then all the
# macports stuff is liable to need rebuilding or re-installing so as to
# avoid moans about version support conflicts when things are linked.
#
# ENVP="MACOSX_DEPLOYMENT_TARGET=10.13"
  AC_MSG_NOTICE([CC=$CC CXX=$CXX CPP=$CPP CXXCPP=$CXXCPP])
  CC="$ENVP $CC"
  CXX="$ENVP $CXX"
  CPP="$ENVP $CPP"
  CXXCPP="$ENVP $CXXCPP"
  AC_MSG_NOTICE([CC=$CC CXX=$CXX CPP=$CPP CXXCPP=$CXXCPP])
# The eccentric code here insists that I use the "macports" version
# of many libraries and it links in the .a files not the .dyld ones so
# that the resulting executable is easier to distribute. If that is not done
# then the binaries that I create will only run on machines where macports
# has been installed and all the libraries are in place...
# Note that all these libraries on my Macintosh have been compiled from
# the source files that "macports" provides without me making any changes.
# So relevant associated source code can be obtained from the macports
# repositories. Since CSL and Reduce are provided under an open source
# license you OF COURSE have the right to reverse engineer or re-link
# against alternative versions of any of the libraries. Linking against the
# .a rather than the .dylib versions is to make the distribution here
# simpler, not to try to lock anybody in or our of anything.
# 
# Note that pthread and dl resolve to system-provided libraries and so
# I am not distributing them, merely links to them. Hmm I will try to
# avoid overriding the linker arrangements in the case that somebody has
# configured for use without a GUI.
  if test "$with_gui" = "yes"
  then
    if test -d /opt/local/lib
    then 
      LL=/opt/local/lib
    fi
    if test -d $HOME/ports/lib
    then 
      LL=$HOME/ports/lib
    fi
    LIBS="$LL/libXrandr.a \
      $LL/libXcursor.a \
      $LL/libXrender.a \
      $LL/libcurses.a \
      $LL/libXext.a \
      $LL/libX11.a \
      $LL/libXft.a \
      $LL/libXau.a \
      $LL/libXfixes.a \
      $LL/libxcb.a \
      $LL/libXdmcp.a \
      $LL/libpng.a \
      $LL/libz.a \
      $LL/libbz2.a \
      $LL/libfreetype.a \
      $LL/libbrotlicommon-static.a \
      $LL/libbrotlidec-static.a \
      $LL/libiconv.a \
      $LL/libXft.a \
      $LL/libfontconfig.a \
      $LL/libintl.a \
      $LL/libexpat.a \
      -lpthread \
      -ldl"
    if test "$with_wx" = "yes"
    then
      LIBS="$LIBS $LL/libiconv.a $LL/libz.a $LL/libpng.a"
    fi
  else
# Here I have explicitly asked to avoid building the GUI. The result is
# that it is probably possible to build without use of MacPorts...
#
# This is to try to force linking against a system-provided version.
    LDFLAGS="-L/usr/lib -lcurses $LDFLAGS"
    LIBS="-lz \
      -lbz2 \
      -liconv \
      -lpthread \
      -ldl"
  fi  
fi

AC_CHECK_PROGS(CYGPATH,[cygpath],[no])

if test "$windows_build" != "yes" && test "$with_wx" != "no"
then
# The "xpm" files use to establish icons for wxWindows lead to a lot
# of ugly warnings about casts from strings to (char *) unless I disable
# that particular warning.
  CXXFLAGS="$CXXFLAGS -Wno-write-strings "
fi

AC_SUBST(HOST)
HOST="$host"

AC_SUBST(CYGWIN_FLAVOUR)
CYGWIN_FLAVOUR="x86_64"

# The next two lines are prompted by the possibility that there might be
# system versions of one of the libraries that I build a private version of.
# If I put the "-I" and "-L" directive for my own versions right at the
# start of the set of options then I hope to get my versions used. This was
# noticed as an issue in the case of a FOX library under Macports but looks
# to be much more general than just that!

CPPFLAGS="$FOX_INCLUDES -I../include $CPPFLAGS"
LDFLAGS="-L../lib $LDFLAGS"

#
# Make some things available for conditional segments of a Makefile
# When using automake there is a conflict between automake conditionals,
# which get processed somewhat early, and Makefile ones that are handled
# only when "make" is invoked. The trick here will be used to insert a
# Makefile conditional that sets up for parallel builds in cases that
# the invocation of "make" is a top level one.

PARALLEL_BUILD='
ifeq "0" "$(MAKELEVEL)"
MAKEFLAGS := -j$(shell nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || printf "1") $(MAKEFLAGS)
endif
'
AC_SUBST([PARALLEL_BUILD])
AM_SUBST_NOTMAKE([PARALLEL_BUILD])

CYGWIN_DIR='
ifneq (, $(shell if test -d "$(with_cygbuild64)"; then echo "yes"; fi))
CYG_CSL = $(with_cygbuild64)/csl/csl.exe
CYG_FLATCSL = $(with_cygbuild64)/csl/flatcsl.exe
CYG_BOOTSTRAPREDUCE = $(with_cygbuild64)/csl/bootstrapreduce.exe
CYG_REDUCE = $(with_cygbuild64)/csl/reduce.exe
CYG_FWINDEMO = $(with_cygbuild64)/csl/fwindemo.exe

$(CYG_CSL):
	@printf "About to make %s in directory %s from %s\n" "$(notdir $@)" "$(with_cygbuild64)" "`pwd`"
	$(MAKE) -C $(with_cygbuild64)/csl $(notdir $@)

$(CYG_FLATCSL):
	@printf "About to make %s in directory %s from %s\n" "$(notdir $@)" "$(with_cygbuild64)" "`pwd`"
	$(MAKE) -C $(with_cygbuild64)/csl $(notdir $@)

$(CYG_BOOTSTRAPREDUCE):
	@printf "About to make %s in directory %s from %s\n" "$(notdir $@)" "$(with_cygbuild64)" "`pwd`"
	$(MAKE) -C $(with_cygbuild64)/csl $(notdir $@)

$(CYG_REDUCE):
	@printf "About to make %s in directory %s from %s\n" "$(notdir $@)" "$(with_cygbuild64)" "`pwd`"
	$(MAKE) -C $(with_cygbuild64)/csl $(notdir $@)

$(CYG_FWINDEMO):
	@printf "About to make %s in directory %s from %s\n" "$(notdir $@)" "$(with_cygbuild64)" "`pwd`"
	$(MAKE) -C $(with_cygbuild64)/csl $(notdir $@)

endif
'
AC_SUBST([CYGWIN_DIR])
AM_SUBST_NOTMAKE([CYGWIN_DIR])

AM_CONDITIONAL(x86, test "$x86" = "yes")
AM_CONDITIONAL(windows, test "$windows_build" = "yes")
AM_CONDITIONAL(win64, test "$win64" = "yes")
AM_CONDITIONAL(cygwin, test "$cygwin_build" = "yes")
AM_CONDITIONAL(cyg64, test "$cyg64" = "yes")
AM_CONDITIONAL(darwin, test "$darwin_build" = "yes")
AM_CONDITIONAL(mac_framework, test "$framework_available" = "yes")
AM_CONDITIONAL(debug, test "$enable_debug" = "yes")
AM_CONDITIONAL(exeext, test "$exeext" = "yes")
AM_CONDITIONAL(fox, test "$with_fox" != "no")
AM_CONDITIONAL(wx, test "$with_wx" != "no")
AM_CONDITIONAL(gui, test "$with_fox" != "no" || test "$with_wx" != "no")
AM_CONDITIONAL(conservative, test "$enable_conservative" = "yes")
AM_CONDITIONAL(arithlib, test "$with_arithlib" = "yes")
AM_CONDITIONAL(cygpath, test "$CYGPATH" != "no")
AM_CONDITIONAL(valgrind, test "$VALGRIND" = "valgrind")
AM_CONDITIONAL(crlibm, test "$with_crlibm" != "no")
AM_CONDITIONAL(softfloat, test "$with_softfloat" != "no")
AM_CONDITIONAL(redfront, test "$with_redfront" != "no")
AM_CONDITIONAL(profile, test "$enable_profile" != "no")
AM_CONDITIONAL(debug, test "$enable_debug" != "no")

AC_OUTPUT

# end of "configure.ac"
