// arith-setup.cpp                         Copyright (C) 2022-2022 Codemist

#ifdef ARITHLIB

//
// Setup for the new set of arithmetic operations
//

/**************************************************************************
 * Copyright (C) 2022, Codemist.                         A C Norman       *
 *                                                                        *
 * Redistribution and use in source and binary forms, with or without     *
 * modification, are permitted provided that the following conditions are *
 * met:                                                                   *
 *                                                                        *
 *     * Redistributions of source code must retain the relevant          *
 *       copyright notice, this list of conditions and the following      *
 *       disclaimer.                                                      *
 *     * Redistributions in binary form must reproduce the above          *
 *       copyright notice, this list of conditions and the following      *
 *       disclaimer in the documentation and/or other materials provided  *
 *       with the distribution.                                           *
 *                                                                        *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    *
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      *
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS      *
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE         *
 * COPYRIGHT OWNERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,   *
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,   *
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS  *
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND *
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR  *
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF     *
 * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
 * DAMAGE.                                                                *
 *************************************************************************/

// $Id$


#include "headers.h"

setup_type const arith_setup[] =
{   DEF_1("modf",         Nmodf),
    {"plus",              Nplus, Nplus, Nplus, Nplus, Nplus},
    {"plus2",             Nplus, Nplus, Nplus, Nplus, Nplus},
    {"+",                 Nplus, Nplus, Nplus, Nplus, Nplus},
    DEF_1("add1",         Nadd1),
    DEF_1("1+",           Nadd1),
    DEF_2("difference",   Ndifference),
    DEF_2("xdifference",  Nxdifference),
    {"-",                 G0Wother, Nminus, Ndifference, G3Wother, G4Wother},
    {"times",             Ntimes, Ntimes, Ntimes, Ntimes, Ntimes},
    {"times2",            Ntimes, Ntimes, Ntimes, Ntimes, Ntimes},
    {"*",                 Ntimes, Ntimes, Ntimes, Ntimes, Ntimes},
    DEF_2("quotient",     Nquotient),
    DEF_2("//",           Nquotient),
    DEF_2("/",            NCLQuotient),
    DEF_2("remainder",    Nremainder),
    DEF_2("rem",          Nremainder),
    DEF_2("mod",          Nmod),
    DEF_2("divide",       Ndivide),
    {"gcd",               Ngcdn, Ngcdn, Ngcdn, Ngcdn, Ngcdn},
    {"gcdn",              Ngcdn, Ngcdn, Ngcdn, Ngcdn, Ngcdn},
    {"lcmn",              Nlcmn, Nlcmn, Nlcmn, Nlcmn, Nlcmn},
    DEF_1("minus",        Nminus),
    DEF_1("minusp",       Nminusp),
    DEF_1("plusp",        Nplusp),
    DEF_1("abs",          Nabs),
    DEF_1("reciprocal",   Nreciprocal),
    DEF_1("square",       Nsquare),
    DEF_1("sqrt",         Nsqrt),
    DEF_1("isqrt",        Nisqrt),
    DEF_1("sub1",         Nsub1),
    DEF_1("1-",           Nsub1),
    DEF_1("zerop",        Nzerop),
    DEF_1("onep",         Nonep),
    DEF_1("oddp",         Noddp),
    DEF_1("evenp",        Nevenp),
    {"float",             G0Wother, Nfloat, Nfloat, G3Wother, G4Wother},
    DEF_1("float128",     Nfloat128),
    DEF_1("fix",          Nfix),
    {"round",             G0Wother, Nround, Nround, G3Wother, G4Wother},
    {"fround",            G0Wother, Nfround, Nfround, G3Wother, G4Wother},
    DEF_2("scale-float",  Nscale_float),
    {"truncate",          G0Wother, Ntruncate, Ntruncate, G3Wother, G4Wother},
    {"floor",             G0Wother, Nfloor, Nfloor, G3Wother, G4Wother},
    {"ceiling",           G0Wother, Nceiling, Nceiling, G3Wother, G4Wother},
    {"ftruncate",         G0Wother, Nftruncate, Nftruncate, G3Wother, G4Wother},
    {"ffloor",            G0Wother, Nffloor, Nffloor, G3Wother, G4Wother},
    {"fceiling",          G0Wother, Nfceiling, Nfceiling, G3Wother, G4Wother},
    DEF_1("frexp",        Nfrexp),
    DEF_2("ldexp",        Nldexp),
    DEF_2("expt",         Nexpt),
    {"max",               Nmax, Nmax, Nmax, Nmax, Nmax},
    {"max2",              Nmax, Nmax, Nmax, Nmax, Nmax},
    {"imax",              Nmax, Nmax, Nmax, Nmax, Nmax},
    {"min",               Nmin, Nmin, Nmin, Nmin, Nmin},
    {"min2",              Nmin, Nmin, Nmin, Nmin, Nmin},
    {"imin",              Nmin, Nmin, Nmin, Nmin, Nmin},
// Neqn is a name that gives trouble. In one part of the code here it is
// "N" followed by "eqn", and denotes the function that will perform equality
// tests on numbers. In another it is "Neqn", otherwise "neqn" but capitalized
// and it is the name of a class that implements "neqn". So I tag "_a" on
// the end of one of these to resolve the clash.
    {"eqn",               G0Wother, G1Wother, Neqn_a, Neqn_a, Neqn_a},
    {"=",                 G0Wother, G1Wother, NCLEqn, NCLEqn, NCLEqn},
    {"neqn",              G0Wother, G1Wother, Nneqn, Nneqn, Nneqn},
    {"/=",                G0Wother, G1Wother, Nneqn, Nneqn, Nneqn},
    {"greaterp",          G0Wother, G1Wother, Ngreaterp, Ngreaterp, Ngreaterp},
    {">",                 G0Wother, G1Wother, Ngreaterp, Ngreaterp, Ngreaterp},
    {"geq",               G0Wother, G1Wother, Ngeq, Ngeq, Ngeq},
    {">=",                G0Wother, G1Wother, Ngeq, Ngeq, Ngeq},
    {"lessp",             G0Wother, G1Wother, Nlessp, Nlessp, Nlessp},
    {"<",                 G0Wother, G1Wother, Nlessp, Nlessp, Nlessp},
    {"leq",               G0Wother, G1Wother, Nleq, Nleq, Nleq},
    {"<=",                G0Wother, G1Wother, Nleq, Nleq, Nleq},
    {"logand",            Nlogand, Nlogand, Nlogand, Nlogand, Nlogand},
    {"logor",             Nlogor, Nlogor, Nlogor, Nlogor, Nlogor},
    {"logior",            Nlogor, Nlogor, Nlogor, Nlogor, Nlogor},
    {"logxor",            Nlogxor, Nlogxor, Nlogxor, Nlogxor, Nlogxor},
    {"logeqv",            Nlogeqv, Nlogeqv, Nlogeqv, Nlogeqv, Nlogeqv},
    {"land",              Nlogand, Nlogand, Nlogand, Nlogand, Nlogand},
    {"lor",               Nlogor, Nlogor, Nlogor, Nlogor, Nlogor},
    {"lxor",              Nlogxor, Nlogxor, Nlogxor, Nlogxor, Nlogxor},
    {"leqv",              Nlogeqv, Nlogeqv, Nlogeqv, Nlogeqv, Nlogeqv},
    DEF_1("lognot",       Nlognot),
    DEF_1("lnot",         Nlognot),
    DEF_1("lsd",          Nlsd),
    DEF_1("msd",          Nmsd),
    DEF_1("integer-length", Nmsd),
    DEF_1("logcount",     Nlogcount),
    DEF_2("lshift",       Nleftshift),
    DEF_2("ash",          Nleftshift),
    DEF_2("ashift",       Nash1),
    DEF_2("ash1",         Nash1),
    DEF_2("rshift",       Nrightshift),
    {"modular-plus",      Nmodular_plus, Nmodular_plus, Nmodular_plus, Nmodular_plus, Nmodular_plus},
    DEF_2("modular-difference", Nmodular_difference),
    {"modular-times",     Nmodular_times, Nmodular_times, Nmodular_times, Nmodular_times, Nmodular_times},
    DEF_2("modular-quotient",   Nmodular_quotient),
    DEF_2("modular-expt", Nmodular_expt),
    DEF_1("set-modulus",  Nset_modulus),
    DEF_1("set-small-modulus",  Nset_modulus),
    DEF_1("modular-number",     Nmodular_number),
    DEF_1("modular-minus",      Nmodular_minus),
    DEF_1("modular-reciprocal", Nmodular_reciprocal),
    DEF_1("safe-modular-reciprocal", Nsafe_modular_reciprocal),
    {"iplus",             Niplus, Niplus, Niplus, Niplus, Niplus},
    {"iplus2",            Niplus, Niplus, Niplus, Niplus, Niplus},
    DEF_1("iadd1",        Niadd1),
    DEF_2("idifference",  Nidifference),
    {"itimes",            Nitimes, Nitimes, Nitimes, Nitimes, Nitimes},
    {"itimes2",           Nitimes, Nitimes, Nitimes, Nitimes, Nitimes},
    DEF_2("iquotient",    Niquotient),
    DEF_2("iremainder",   Nremainder),
    DEF_2("irem",         Nremainder),
    DEF_2("imod",         Nmod),
    DEF_2("idivide",      Nidivide),
    {"igcdn",             Nigcdn, Nigcdn, Nigcdn, Nigcdn, Nigcdn},
    {"ilcmn",             Nilcmn, Nilcmn, Nilcmn, Nilcmn, Nilcmn},
    DEF_1("iminus",       Niminus),
    DEF_1("iminusp",      Niminusp),
    DEF_1("iabs",         Niabs),
    DEF_1("ireciprocal",  Nireciprocal),
    DEF_1("isquare",      Nisquare),
    DEF_1("isub1",        Nisub1),
    DEF_1("izerop",       Nizerop),
    DEF_1("ionep",        Nionep),
    DEF_1("ioddp",        Nioddp),
    DEF_1("ievenp",       Nievenp),
    DEF_2("iexpt",        Niexpt),
    {"ieqn",              G0Wother, G1Wother, Nieqn_a, Nieqn_a, Nieqn_a},
    {"ineqn",             G0Wother, G1Wother, Nineqn, Nineqn, Nineqn},
    {"igreaterp",         G0Wother, G1Wother, Nigreaterp, Nigreaterp, Nigreaterp},
    {"igeq",              G0Wother, G1Wother, Nigeq, Nigeq, Nigeq},
    {"ilessp",            G0Wother, G1Wother, Nilessp, Nilessp, Nilessp},
    {"ileq",              G0Wother, G1Wother, Nileq, Nileq, Nileq},
    {"ilogand",           Nilogand, Nilogand, Nilogand, Nilogand, Nilogand},
    {"ilogor",            Nilogor, Nilogor, Nilogor, Nilogor, Nilogor},
    {"ilogxor",           Nilogxor, Nilogxor, Nilogxor, Nilogxor, Nilogxor},
    {"ilogeqv",           Nilogeqv, Nilogeqv, Nilogeqv, Nilogeqv, Nilogeqv},
    {"iland",             Nilogand, Nilogand, Nilogand, Nilogand, Nilogand},
    {"ilor",              Nilogor, Nilogor, Nilogor, Nilogor, Nilogor},
    {"ilxor",             Nilogxor, Nilogxor, Nilogxor, Nilogxor, Nilogxor},
    {"ileqv",             Nilogeqv, Nilogeqv, Nilogeqv, Nilogeqv, Nilogeqv},
    DEF_1("ilognot",      Nilognot),
    DEF_1("ilnot",        Nilognot),
    DEF_1("ilogcount",    Nlogcount),
    DEF_2("ilshift",      Nileftshift),
    DEF_2("irshift",      Nirightshift),
    DEF_2("ileftshift",   Nileftshift),
    DEF_2("irightshift",  Nirightshift),
    DEF_1("abs",          Nabsval),
    DEF_1("acos",         Nacos),
    DEF_1("acosd",        Nacosd),
    DEF_1("acosh",        Nacosh),
    DEF_1("acot",         Nacot),
    DEF_1("acotd",        Nacotd),
    DEF_1("acoth",        Nacoth),
    DEF_1("acsc",         Nacsc),
    DEF_1("acscd",        Nacscd),
    DEF_1("acsch",        Nacsch),
    DEF_1("asec",         Nasec),
    DEF_1("asecd",        Nasecd),
    DEF_1("asech",        Nasech),
    DEF_1("asin",         Nasin),
    DEF_1("asind",        Nasind),
    DEF_1("asinh",        Nasinh),
    DEF_1("atand",        Natand),
    DEF_2("atan2",        Natan2),
    DEF_2("atan2d",       Natan2d),
    DEF_1("atanh",        Natanh),
    DEF_1("cbrt",         Ncbrt),
    DEF_1("cos",          Ncos),
    DEF_1("cosd",         Ncosd),
    DEF_1("cosh",         Ncosh),
    DEF_1("cot",          Ncot),
     DEF_1("cotd",         Ncotd),
    DEF_1("coth",         Ncoth),
    DEF_1("csc",          Ncsc),
    DEF_1("cscd",         Ncscd),
    DEF_1("csch",         Ncsch),
    DEF_1("exp",          Nexp),
    DEF_2("expt",         Nexpt),
    DEF_2("hypot",        Nhypot),
    DEF_1("ln",           Nln),
    {"log",               G0Wother, Nln, Nlog_2, G3Wother, G4Wother},
    DEF_1("log2",         Nlog2),
    DEF_1("log10",        Nlog10),
    DEF_1("sec",          Nsec),
    DEF_1("secd",         Nsecd),
    DEF_1("sech",         Nsech),
    DEF_1("sin",          Nsin),
    DEF_1("sind",         Nsind),
    DEF_1("sinh",         Nsinh),
    DEF_1("sqrt",         Nsqrt),
    DEF_1("tan",          Ntan),
    DEF_1("tand",         Ntand),
    DEF_1("tanh",         Ntanh),
    DEF_1("cis",          Ncis),
//  DEF_1("isqrt",        Nisqrt),
    DEF_1("phase",        Nphase),
    DEF_1("signum",       Nsignum),
    {"atan",              G0Wother, Natan, Natan_2, G3Wother, G4Wother},
    DEF_2("logb",         Nlog_2),
    DEF_2("native-carg",  Ncarg),
    DEF_2("native-cabs",  Ncabs),
    DEF_2("native-cexp",  Ncexp),
    DEF_2("native-clog",  Nclog),
    DEF_2("native-csqrt", Ncsqrt),
    DEF_2("native-csin",  Ncsin),
    DEF_2("native-ccos",  Nccos),
    DEF_2("native-ctan",  Nctan),
    DEF_2("native-ccsc",  Nccsc),
    DEF_2("native-csec",  Ncsec),
    DEF_2("native-ccot",  Nccot),
    DEF_2("native-casin", Ncasin),
    DEF_2("native-cacos", Ncacos),
    DEF_2("native-catan", Ncatan),
    DEF_2("native-cacsc", Ncacsc),
    DEF_2("native-casec", Ncasec),
    DEF_2("native-cacot", Ncacot),
    DEF_2("native-csinh", Ncsinh),
    DEF_2("native-ccosh", Nccosh),
    DEF_2("native-ctanh", Nctanh),
    DEF_2("native-ccsch", Nccsch),
    DEF_2("native-csech", Ncsech),
    DEF_2("native-ccoth", Nccoth),
    DEF_2("native-casinh",Ncasinh),
    DEF_2("native-cacosh",Ncacosh),
    DEF_2("native-catanh",Ncatanh),
    DEF_2("native-cacsch",Ncacsch),
    DEF_2("native-casech",Ncasech),
    DEF_2("native-cacoth",Ncacoth),
    DEF_1("numerator",    Nnumerator),
    DEF_1("denominator",  Ndenominator),
    DEF_1("realpart",     Nrealpart),
    DEF_1("imagpart",     Nimagpart),
    DEF_1("decode-float", Ndecode_float),
    DEF_1("integer-decode-float", Ninteger_decode_float),

    DEF_1("fp-infinite", Nfp_infinite),
    DEF_1("float-infinity-p", Nfp_infinite),
    DEF_1("fp-nan", Nfp_nan),
    DEF_1("fp-finite", Nfp_finite),
    DEF_1("fp-subnorm", Nfp_subnorm),
    DEF_1("float-denormalized-p", Nfp_subnorm),
    DEF_1("fp-signbit", Nfp_signbit),
    DEF_1("float-sign", Nfp_signbit),
    DEF_1("float-digits", Nfloat_digits),
    DEF_1("float-precision", Nfloat_precision),
    DEF_1("float-radix", Nfloat_radix),
    {"float_sign", G0Wother, Nfloat_sign1, Nfloat_sign2, G3Wother, G4Wother},

    DEF_1("rational", Nrational),
    DEF_1("manexp", Nmanexp),
    DEF_1("rationalize", Nrationalize),
    {"random", G0Wother, Nrandom, Nrandom, G3Wother, G4Wother}, 
    DEF_1("random-number", Nrandom),
    DEF_0("next-random-number", Nnext_random),
    DEF_0("random-fixnum", Nnext_random),
    {"make-random-state", G0Wother, Nmake_random_state, Nmake_random_state, G3Wother, G4Wother},
    DEF_1("md5", Nmd5),
    DEF_1("md5string", Nmd5string),
    DEF_1("md60", Nmd60),
    DEF_2("inorm", Ninorm),
    DEF_3("boole", Nboole),
    DEF_2("byte", Nbyte),
    DEF_1("byte-position", Nbyte_position),
    DEF_1("byte-size", Nbyte_size),
    DEF_2("ldb", Nldb),
    DEF_2("mask-field", Nmask_field),
    DEF_2("ldb-test", Nldb_test),
    DEF_3("dpb", Ndpb),
    DEF_3("deposit-field", Ndeposit_field),
    DEF_2("logbitp", Nlogbitp),
    DEF_2("logtest", Nlogtest),
    {"complex", G0Wother, Ncomplex_1, Ncomplex_2, G3Wother, G4Wother}, 
    DEF_1("conjugate", Nconjugate),
    DEF_2("fp-evaluate", Nfp_eval),
    DEF_1("trap-floating-overflow", Ntrap_floating_overflow),
    {"validate-number", G0Wother, Nvalidate_number, Nvalidate_number, G3Wother, G4Wother},
    {nullptr, nullptr, nullptr, nullptr, nullptr, nullptr}
};

#endif // ARITHLIB

// end of arith-setup.cpp
